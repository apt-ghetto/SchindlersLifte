
Liftsumulator_Basic_V1_AufgabeC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000850  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000850  000008e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000025  0080006e  0080006e  000008f2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000008f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000990  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d1f  00000000  00000000  00000a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003aa  00000000  00000000  00001797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009fa  00000000  00000000  00001b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  0000253c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000814  00000000  00000000  000026e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b1  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000033ad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 39       	cpi	r26, 0x93	; 147
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 01 	call	0x2a4	; 0x2a4 <main>
  8a:	0c 94 26 04 	jmp	0x84c	; 0x84c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AddRequestToBuffer>:

// Add a Request to the circular buffer
uint8_t AddRequestToBuffer(LiftPosType pressedFloor)
{
	// return fail if buffer is full
	if (readPointer == writePointer && invert == TRUE) {
  92:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
  96:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__data_start+0x1>
  9a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <readPointer>
  9e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <readPointer+0x1>
  a2:	2e 17       	cp	r18, r30
  a4:	3f 07       	cpc	r19, r31
  a6:	b1 f5       	brne	.+108    	; 0x114 <AddRequestToBuffer+0x82>
  a8:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <invert>
  ac:	91 30       	cpi	r25, 0x01	; 1
  ae:	91 f5       	brne	.+100    	; 0x114 <AddRequestToBuffer+0x82>
  b0:	36 c0       	rjmp	.+108    	; 0x11e <AddRequestToBuffer+0x8c>
			return BUFFER_SUCCESS;
		}
	}

	// save request to buffer
	*writePointer = pressedFloor;
  b2:	80 83       	st	Z, r24

	// move write pointer to next position
	writePointer++;
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  b8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1

	// check if write pointer is at the end of the buffer
	// if so, set to the beginning again
	if ( writePointer > &callBuffer[BUFFER_SIZE - 1] ) {
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	86 36       	cpi	r24, 0x66	; 102
  c2:	92 07       	cpc	r25, r18
  c4:	09 f0       	breq	.+2      	; 0xc8 <AddRequestToBuffer+0x36>
  c6:	30 f4       	brcc	.+12     	; 0xd4 <AddRequestToBuffer+0x42>

	// save request to buffer
	*writePointer = pressedFloor;

	// move write pointer to next position
	writePointer++;
  c8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  cc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	if ( writePointer > &callBuffer[BUFFER_SIZE - 1] ) {
		writePointer = callBuffer;
		invert = TRUE;
	}

	return BUFFER_SUCCESS;
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	25 c0       	rjmp	.+74     	; 0x11e <AddRequestToBuffer+0x8c>
	writePointer++;

	// check if write pointer is at the end of the buffer
	// if so, set to the beginning again
	if ( writePointer > &callBuffer[BUFFER_SIZE - 1] ) {
		writePointer = callBuffer;
  d4:	84 e6       	ldi	r24, 0x64	; 100
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  dc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		invert = TRUE;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <invert>
	}

	return BUFFER_SUCCESS;
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	1a c0       	rjmp	.+52     	; 0x11e <AddRequestToBuffer+0x8c>
	for (int i = 0; i < BUFFER_SIZE; i++)
	{
		// return success to toggle indicators but don't save in buffer again
		if (callBuffer[i] == pressedFloor)
		{
			return BUFFER_SUCCESS;
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	18 c0       	rjmp	.+48     	; 0x11e <AddRequestToBuffer+0x8c>
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	16 c0       	rjmp	.+44     	; 0x11e <AddRequestToBuffer+0x8c>
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	14 c0       	rjmp	.+40     	; 0x11e <AddRequestToBuffer+0x8c>

	// return success if requested floor is the current destination
	// don't save request again but toggle indicator in main function
	if (pressedFloor == requestedElevatorPosition)
	{
		return BUFFER_SUCCESS;
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	12 c0       	rjmp	.+36     	; 0x11e <AddRequestToBuffer+0x8c>

	// check if the requested floor is already in the buffer
	for (int i = 0; i < BUFFER_SIZE; i++)
	{
		// return success to toggle indicators but don't save in buffer again
		if (callBuffer[i] == pressedFloor)
  fa:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <callBuffer>
  fe:	89 17       	cp	r24, r25
 100:	a1 f3       	breq	.-24     	; 0xea <AddRequestToBuffer+0x58>
 102:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <callBuffer+0x1>
 106:	98 17       	cp	r25, r24
 108:	91 f3       	breq	.-28     	; 0xee <AddRequestToBuffer+0x5c>
 10a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <callBuffer+0x2>
 10e:	89 13       	cpse	r24, r25
 110:	d0 cf       	rjmp	.-96     	; 0xb2 <AddRequestToBuffer+0x20>
 112:	ef cf       	rjmp	.-34     	; 0xf2 <AddRequestToBuffer+0x60>
		return BUFFER_FAIL;
	}

	// return success if requested floor is the current destination
	// don't save request again but toggle indicator in main function
	if (pressedFloor == requestedElevatorPosition)
 114:	90 91 68 00 	lds	r25, 0x0068	; 0x800068 <requestedElevatorPosition>
 118:	89 13       	cpse	r24, r25
 11a:	ef cf       	rjmp	.-34     	; 0xfa <AddRequestToBuffer+0x68>
 11c:	ec cf       	rjmp	.-40     	; 0xf6 <AddRequestToBuffer+0x64>
		writePointer = callBuffer;
		invert = TRUE;
	}

	return BUFFER_SUCCESS;
}
 11e:	89 2f       	mov	r24, r25
 120:	08 95       	ret

00000122 <GetRequestFromBuffer>:

// Get a Button from the circular buffer
uint8_t GetRequestFromBuffer()
{
	// return fail if no calls are in buffer
	if (readPointer == writePointer && invert == FALSE) {
 122:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <readPointer>
 126:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <readPointer+0x1>
 12a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 12e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 132:	e8 17       	cp	r30, r24
 134:	f9 07       	cpc	r31, r25
 136:	21 f4       	brne	.+8      	; 0x140 <GetRequestFromBuffer+0x1e>
 138:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <invert>
 13c:	88 23       	and	r24, r24
 13e:	39 f1       	breq	.+78     	; 0x18e <GetRequestFromBuffer+0x6c>
		return BUFFER_FAIL;
	}
	
	// read floor from buffer
	requestedElevatorPosition = *readPointer;
 140:	80 81       	ld	r24, Z
 142:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <requestedElevatorPosition>

	// check elevator direction
	elevatorDirection = requestedElevatorPosition > currentElevatorState;
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentElevatorState>
 14c:	28 17       	cp	r18, r24
 14e:	08 f0       	brcs	.+2      	; 0x152 <GetRequestFromBuffer+0x30>
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <elevatorDirection>

	// delete the request from the buffer
	*readPointer = None;
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	80 83       	st	Z, r24
	
	// increment read position
	readPointer++;
 15a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <readPointer>
 15e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <readPointer+0x1>
 162:	01 96       	adiw	r24, 0x01	; 1

	// reset read position to 0 if end of buffer is reached
	if (readPointer > &callBuffer[BUFFER_SIZE - 1]) {
 164:	20 e0       	ldi	r18, 0x00	; 0
 166:	86 36       	cpi	r24, 0x66	; 102
 168:	92 07       	cpc	r25, r18
 16a:	09 f0       	breq	.+2      	; 0x16e <GetRequestFromBuffer+0x4c>
 16c:	30 f4       	brcc	.+12     	; 0x17a <GetRequestFromBuffer+0x58>

	// delete the request from the buffer
	*readPointer = None;
	
	// increment read position
	readPointer++;
 16e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <readPointer+0x1>
 172:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <readPointer>
	if (readPointer > &callBuffer[BUFFER_SIZE - 1]) {
		readPointer = callBuffer;
		invert = FALSE;
	}
	
	return BUFFER_SUCCESS;
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	08 95       	ret
	// increment read position
	readPointer++;

	// reset read position to 0 if end of buffer is reached
	if (readPointer > &callBuffer[BUFFER_SIZE - 1]) {
		readPointer = callBuffer;
 17a:	84 e6       	ldi	r24, 0x64	; 100
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <readPointer+0x1>
 182:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <readPointer>
		invert = FALSE;
 186:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <invert>
	}
	
	return BUFFER_SUCCESS;
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	08 95       	ret
// Get a Button from the circular buffer
uint8_t GetRequestFromBuffer()
{
	// return fail if no calls are in buffer
	if (readPointer == writePointer && invert == FALSE) {
		return BUFFER_FAIL;
 18e:	81 e0       	ldi	r24, 0x01	; 1
		readPointer = callBuffer;
		invert = FALSE;
	}
	
	return BUFFER_SUCCESS;
}
 190:	08 95       	ret

00000192 <GetSpeedType>:

// Get the speed of the elevator depending on its position
void GetSpeedType() {

	if (stepsToGoal == 0)
 192:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 196:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	01 f5       	brne	.+64     	; 0x1de <GetSpeedType+0x4c>
	{
		stepsDone = 0;
 19e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <stepsDone+0x1>
 1a2:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <stepsDone>
		stepCounter = 0;
 1a6:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <stepCounter+0x1>
 1aa:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <stepCounter>
		stepsToGoal = (requestedElevatorPosition - currentElevatorState) * STEPS;
 1ae:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <requestedElevatorPosition>
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <currentElevatorState>
 1b8:	82 1b       	sub	r24, r18
 1ba:	91 09       	sbc	r25, r1

		if (stepsToGoal < 0)
 1bc:	9c 01       	movw	r18, r24
 1be:	22 95       	swap	r18
 1c0:	32 95       	swap	r19
 1c2:	30 7f       	andi	r19, 0xF0	; 240
 1c4:	32 27       	eor	r19, r18
 1c6:	20 7f       	andi	r18, 0xF0	; 240
 1c8:	32 27       	eor	r19, r18
 1ca:	93 ff       	sbrs	r25, 3
 1cc:	2c c0       	rjmp	.+88     	; 0x226 <GetSpeedType+0x94>
		{
			stepsToGoal = -stepsToGoal;
 1ce:	31 95       	neg	r19
 1d0:	21 95       	neg	r18
 1d2:	31 09       	sbc	r19, r1
 1d4:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__data_end+0x1>
 1d8:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__data_end>
 1dc:	0a c0       	rjmp	.+20     	; 0x1f2 <GetSpeedType+0x60>
		}
	}

	if (stepsDone < 4 || stepsToGoal < 4)
 1de:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <stepsDone>
 1e2:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <stepsDone+0x1>
 1e6:	24 30       	cpi	r18, 0x04	; 4
 1e8:	31 05       	cpc	r19, r1
 1ea:	1c f0       	brlt	.+6      	; 0x1f2 <GetSpeedType+0x60>
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	91 05       	cpc	r25, r1
 1f0:	3c f4       	brge	.+14     	; 0x200 <GetSpeedType+0x6e>
	{
		currentSpeed = Slow;
 1f2:	80 ea       	ldi	r24, 0xA0	; 160
 1f4:	9f e0       	ldi	r25, 0x0F	; 15
 1f6:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <currentSpeed+0x1>
 1fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <currentSpeed>
 1fe:	08 95       	ret
	}
	else if (stepsDone < 8 || stepsToGoal < 8)
 200:	28 30       	cpi	r18, 0x08	; 8
 202:	31 05       	cpc	r19, r1
 204:	14 f0       	brlt	.+4      	; 0x20a <GetSpeedType+0x78>
 206:	08 97       	sbiw	r24, 0x08	; 8
 208:	3c f4       	brge	.+14     	; 0x218 <GetSpeedType+0x86>
	{
		currentSpeed = Medium;
 20a:	80 ed       	ldi	r24, 0xD0	; 208
 20c:	97 e0       	ldi	r25, 0x07	; 7
 20e:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <currentSpeed+0x1>
 212:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <currentSpeed>
 216:	08 95       	ret
	}
	else
	{
		currentSpeed = Fast;
 218:	88 ee       	ldi	r24, 0xE8	; 232
 21a:	93 e0       	ldi	r25, 0x03	; 3
 21c:	90 93 7d 00 	sts	0x007D, r25	; 0x80007d <currentSpeed+0x1>
 220:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <currentSpeed>
	}

}
 224:	08 95       	ret

	if (stepsToGoal == 0)
	{
		stepsDone = 0;
		stepCounter = 0;
		stepsToGoal = (requestedElevatorPosition - currentElevatorState) * STEPS;
 226:	30 93 6f 00 	sts	0x006F, r19	; 0x80006f <__data_end+0x1>
 22a:	20 93 6e 00 	sts	0x006E, r18	; 0x80006e <__data_end>
 22e:	e1 cf       	rjmp	.-62     	; 0x1f2 <GetSpeedType+0x60>

00000230 <ConvertButtonTypeToLiftPosType>:
// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
	LiftPosType retVal = None;

	switch (button)
 230:	88 30       	cpi	r24, 0x08	; 8
 232:	c9 f0       	breq	.+50     	; 0x266 <ConvertButtonTypeToLiftPosType+0x36>
 234:	38 f4       	brcc	.+14     	; 0x244 <ConvertButtonTypeToLiftPosType+0x14>
 236:	82 30       	cpi	r24, 0x02	; 2
 238:	91 f0       	breq	.+36     	; 0x25e <ConvertButtonTypeToLiftPosType+0x2e>
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	91 f0       	breq	.+36     	; 0x262 <ConvertButtonTypeToLiftPosType+0x32>
 23e:	81 30       	cpi	r24, 0x01	; 1
 240:	a1 f4       	brne	.+40     	; 0x26a <ConvertButtonTypeToLiftPosType+0x3a>
 242:	0b c0       	rjmp	.+22     	; 0x25a <ConvertButtonTypeToLiftPosType+0x2a>
 244:	80 32       	cpi	r24, 0x20	; 32
 246:	59 f0       	breq	.+22     	; 0x25e <ConvertButtonTypeToLiftPosType+0x2e>
 248:	18 f4       	brcc	.+6      	; 0x250 <ConvertButtonTypeToLiftPosType+0x20>
 24a:	80 31       	cpi	r24, 0x10	; 16
 24c:	31 f0       	breq	.+12     	; 0x25a <ConvertButtonTypeToLiftPosType+0x2a>
 24e:	0d c0       	rjmp	.+26     	; 0x26a <ConvertButtonTypeToLiftPosType+0x3a>
 250:	80 34       	cpi	r24, 0x40	; 64
 252:	39 f0       	breq	.+14     	; 0x262 <ConvertButtonTypeToLiftPosType+0x32>
 254:	80 38       	cpi	r24, 0x80	; 128
 256:	39 f0       	breq	.+14     	; 0x266 <ConvertButtonTypeToLiftPosType+0x36>
 258:	08 c0       	rjmp	.+16     	; 0x26a <ConvertButtonTypeToLiftPosType+0x3a>
	{
		case LiftButton_F0:
		case FloorButton_F0:
		{
			retVal = Floor0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret
			break;
		}
		case LiftButton_F1:
		case FloorButton_F1:
		{
			retVal = Floor1;
 25e:	81 e0       	ldi	r24, 0x01	; 1
			break;
 260:	08 95       	ret
		}
		case LiftButton_F2:
		case FloorButton_F2:
		{
			retVal = Floor2;
 262:	82 e0       	ldi	r24, 0x02	; 2
			break;
 264:	08 95       	ret
		}
		case LiftButton_F3:
		case FloorButton_F3:
		{
			retVal = Floor3;
 266:	83 e0       	ldi	r24, 0x03	; 3
			break;
 268:	08 95       	ret
}

// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
	LiftPosType retVal = None;
 26a:	87 e0       	ldi	r24, 0x07	; 7
			break;
		}
	}

	return retVal;
}
 26c:	08 95       	ret

0000026e <CheckKeyEvent>:

// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
 26e:	cf 93       	push	r28
	ButtonType retVal = EmergencyButton;

	for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
 270:	c0 e8       	ldi	r28, 0x80	; 128
 272:	01 c0       	rjmp	.+2      	; 0x276 <CheckKeyEvent+0x8>
 274:	c8 2f       	mov	r28, r24
	{
		if (ReadKeyEvent(key) == Pressed)
 276:	8c 2f       	mov	r24, r28
 278:	0e 94 55 03 	call	0x6aa	; 0x6aa <ReadKeyEvent>
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	31 f4       	brne	.+12     	; 0x28c <CheckKeyEvent+0x1e>
// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
	ButtonType retVal = EmergencyButton;

	for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
 280:	8c 2f       	mov	r24, r28
 282:	86 95       	lsr	r24
 284:	29 f0       	breq	.+10     	; 0x290 <CheckKeyEvent+0x22>
 286:	cc 23       	and	r28, r28
 288:	a9 f3       	breq	.-22     	; 0x274 <CheckKeyEvent+0x6>
 28a:	02 c0       	rjmp	.+4      	; 0x290 <CheckKeyEvent+0x22>
 28c:	c6 95       	lsr	r28
 28e:	99 f7       	brne	.-26     	; 0x276 <CheckKeyEvent+0x8>
		{
			retVal = key;
		}
	}
	return retVal;
}
 290:	8c 2f       	mov	r24, r28
 292:	cf 91       	pop	r28
 294:	08 95       	ret

00000296 <UpdateDisplay>:

// Update the 7-Seg. display
void UpdateDisplay (LiftPosType elevatorState)
{
	switch (elevatorState)
 296:	85 30       	cpi	r24, 0x05	; 5
 298:	10 f0       	brcs	.+4      	; 0x29e <UpdateDisplay+0x8>
 29a:	86 30       	cpi	r24, 0x06	; 6
 29c:	11 f4       	brne	.+4      	; 0x2a2 <UpdateDisplay+0xc>
		case Floor2:
		case Floor3:
		case Error:
		case Test:
		{
			SetDisplay(elevatorState);
 29e:	0e 94 cd 03 	call	0x79a	; 0x79a <SetDisplay>
 2a2:	08 95       	ret

000002a4 <main>:
*** MAIN PROGRAM
*******************************************************************************/
int main(void)
{

	InitializePorts();  // Initialization of ports
 2a4:	0e 94 28 02 	call	0x450	; 0x450 <InitializePorts>
	InitializeStart();  // Set start state of the system
 2a8:	0e 94 2e 02 	call	0x45c	; 0x45c <InitializeStart>
				{
					SetDoorState(Closed, currentElevatorState);
				}
				else
				{
					state = MoveLift;
 2ac:	03 e0       	ldi	r16, 0x03	; 3
					}
				}
				else
				{
					stepsToGoal = 0;
					state = OpenDoor;
 2ae:	14 e0       	ldi	r17, 0x04	; 4
			{
				// Open the door and wait still the door is open completely
				SetDoorState(Open, currentElevatorState);
				if (ReadDoorState(currentElevatorState) == Open)
				{
					state = Waiting;
 2b0:	ff 24       	eor	r15, r15
 2b2:	f3 94       	inc	r15
	// Endless loop
	while(1)
	{

		// do always
		UpdateDisplay(currentElevatorState);  // Update the 7-Seg. display (lift)
 2b4:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentElevatorState>
 2b8:	0e 94 4b 01 	call	0x296	; 0x296 <UpdateDisplay>
		currentElevatorState = ReadElevatorState();
 2bc:	0e 94 a0 03 	call	0x740	; 0x740 <ReadElevatorState>
 2c0:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <currentElevatorState>
		SetOutput();               // Send the calculated output values to the ports
 2c4:	0e 94 46 02 	call	0x48c	; 0x48c <SetOutput>

		// Handling state machine
		switch (state)
 2c8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <state>
 2cc:	82 30       	cpi	r24, 0x02	; 2
 2ce:	11 f1       	breq	.+68     	; 0x314 <main+0x70>
 2d0:	28 f4       	brcc	.+10     	; 0x2dc <main+0x38>
 2d2:	88 23       	and	r24, r24
 2d4:	49 f0       	breq	.+18     	; 0x2e8 <main+0x44>
 2d6:	81 30       	cpi	r24, 0x01	; 1
 2d8:	a9 f0       	breq	.+42     	; 0x304 <main+0x60>
 2da:	7e c0       	rjmp	.+252    	; 0x3d8 <main+0x134>
 2dc:	83 30       	cpi	r24, 0x03	; 3
 2de:	49 f1       	breq	.+82     	; 0x332 <main+0x8e>
 2e0:	84 30       	cpi	r24, 0x04	; 4
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <main+0x42>
 2e4:	64 c0       	rjmp	.+200    	; 0x3ae <main+0x10a>
 2e6:	78 c0       	rjmp	.+240    	; 0x3d8 <main+0x134>
		{
			case Uninitialized:
			{
				// Lift position calibration to ground floor (Floor0)
				if (ReadElevatorState() != Floor0)
 2e8:	0e 94 a0 03 	call	0x740	; 0x740 <ReadElevatorState>
 2ec:	88 23       	and	r24, r24
 2ee:	19 f0       	breq	.+6      	; 0x2f6 <main+0x52>
				{
					CalibrateElevatorPosition();
 2f0:	0e 94 c3 03 	call	0x786	; 0x786 <CalibrateElevatorPosition>
 2f4:	71 c0       	rjmp	.+226    	; 0x3d8 <main+0x134>
				}
				else
				{
					state = OpenDoor;
 2f6:	10 93 76 00 	sts	0x0076, r17	; 0x800076 <state>
					currentElevatorState = ReadElevatorState();
 2fa:	0e 94 a0 03 	call	0x740	; 0x740 <ReadElevatorState>
 2fe:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <currentElevatorState>
 302:	6a c0       	rjmp	.+212    	; 0x3d8 <main+0x134>


			case Waiting:
			{
				// Waiting for new floor request
				if (!GetRequestFromBuffer())
 304:	0e 94 91 00 	call	0x122	; 0x122 <GetRequestFromBuffer>
 308:	81 11       	cpse	r24, r1
 30a:	66 c0       	rjmp	.+204    	; 0x3d8 <main+0x134>
				{
					// request found
					state = CloseDoor;
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <state>
 312:	62 c0       	rjmp	.+196    	; 0x3d8 <main+0x134>


			case CloseDoor:
			{
				// Close the door and wait until the door is closed
				if (ReadDoorState(currentElevatorState) != Closed)
 314:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentElevatorState>
 318:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <ReadDoorState>
 31c:	88 23       	and	r24, r24
 31e:	31 f0       	breq	.+12     	; 0x32c <main+0x88>
				{
					SetDoorState(Closed, currentElevatorState);
 320:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <currentElevatorState>
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 71 03 	call	0x6e2	; 0x6e2 <SetDoorState>
 32a:	56 c0       	rjmp	.+172    	; 0x3d8 <main+0x134>
				}
				else
				{
					state = MoveLift;
 32c:	00 93 76 00 	sts	0x0076, r16	; 0x800076 <state>
 330:	53 c0       	rjmp	.+166    	; 0x3d8 <main+0x134>


			case MoveLift:
			{
				// Move cabin to the requested floor
				if (currentElevatorState != requestedElevatorPosition)
 332:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <currentElevatorState>
 336:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <requestedElevatorPosition>
 33a:	98 17       	cp	r25, r24
 33c:	89 f1       	breq	.+98     	; 0x3a0 <main+0xfc>
				{
					GetSpeedType();
 33e:	0e 94 c9 00 	call	0x192	; 0x192 <GetSpeedType>
					MoveElevator(elevatorDirection, currentSpeed);
 342:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <currentSpeed>
 346:	70 91 7d 00 	lds	r23, 0x007D	; 0x80007d <currentSpeed+0x1>
 34a:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <elevatorDirection>
 34e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <MoveElevator>
					stepCounter++;
 352:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <stepCounter>
 356:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <stepCounter+0x1>
 35a:	01 96       	adiw	r24, 0x01	; 1
 35c:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <stepCounter+0x1>
 360:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <stepCounter>
					if (stepCounter == currentSpeed)
 364:	20 91 7c 00 	lds	r18, 0x007C	; 0x80007c <currentSpeed>
 368:	30 91 7d 00 	lds	r19, 0x007D	; 0x80007d <currentSpeed+0x1>
 36c:	82 17       	cp	r24, r18
 36e:	93 07       	cpc	r25, r19
 370:	99 f5       	brne	.+102    	; 0x3d8 <main+0x134>
					{
						stepsToGoal--;
 372:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__data_end>
 376:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <__data_end+0x1>
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <__data_end+0x1>
 380:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__data_end>
						stepsDone++;
 384:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <stepsDone>
 388:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <stepsDone+0x1>
 38c:	01 96       	adiw	r24, 0x01	; 1
 38e:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <stepsDone+0x1>
 392:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <stepsDone>
						stepCounter = 0;
 396:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <stepCounter+0x1>
 39a:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <stepCounter>
 39e:	1c c0       	rjmp	.+56     	; 0x3d8 <main+0x134>
					}
				}
				else
				{
					stepsToGoal = 0;
 3a0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__data_end+0x1>
 3a4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__data_end>
					state = OpenDoor;
 3a8:	10 93 76 00 	sts	0x0076, r17	; 0x800076 <state>
 3ac:	15 c0       	rjmp	.+42     	; 0x3d8 <main+0x134>


			case OpenDoor:
			{
				// Open the door and wait still the door is open completely
				SetDoorState(Open, currentElevatorState);
 3ae:	60 91 67 00 	lds	r22, 0x0067	; 0x800067 <currentElevatorState>
 3b2:	82 e0       	ldi	r24, 0x02	; 2
 3b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <SetDoorState>
				if (ReadDoorState(currentElevatorState) == Open)
 3b8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentElevatorState>
 3bc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <ReadDoorState>
 3c0:	82 30       	cpi	r24, 0x02	; 2
 3c2:	51 f4       	brne	.+20     	; 0x3d8 <main+0x134>
				{
					state = Waiting;
 3c4:	f0 92 76 00 	sts	0x0076, r15	; 0x800076 <state>
					ClrIndicatorFloorState(currentElevatorState);
 3c8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentElevatorState>
 3cc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <ClrIndicatorFloorState>
					ClrIndicatorElevatorState(currentElevatorState);
 3d0:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentElevatorState>
 3d4:	0e 94 05 04 	call	0x80a	; 0x80a <ClrIndicatorElevatorState>
				break;
			}
		}

		// check if button is pressed
		ButtonType newKey = CheckKeyEvent();
 3d8:	0e 94 37 01 	call	0x26e	; 0x26e <CheckKeyEvent>
 3dc:	d8 2f       	mov	r29, r24
		LiftPosType pressedFloor = ConvertButtonTypeToLiftPosType(newKey);
 3de:	0e 94 18 01 	call	0x230	; 0x230 <ConvertButtonTypeToLiftPosType>
 3e2:	c8 2f       	mov	r28, r24
		
		// if a button is pressed, check if it is a floor-request
		// and if it's not the current floor
		if (pressedFloor <= 3 && pressedFloor != currentElevatorState)
 3e4:	84 30       	cpi	r24, 0x04	; 4
 3e6:	08 f0       	brcs	.+2      	; 0x3ea <main+0x146>
 3e8:	65 cf       	rjmp	.-310    	; 0x2b4 <main+0x10>
 3ea:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <currentElevatorState>
 3ee:	c8 17       	cp	r28, r24
 3f0:	09 f4       	brne	.+2      	; 0x3f4 <main+0x150>
 3f2:	60 cf       	rjmp	.-320    	; 0x2b4 <main+0x10>
		{
			// if call is saved to buffer, set indicators
			if (!AddRequestToBuffer(pressedFloor))
 3f4:	8c 2f       	mov	r24, r28
 3f6:	0e 94 49 00 	call	0x92	; 0x92 <AddRequestToBuffer>
 3fa:	81 11       	cpse	r24, r1
 3fc:	5b cf       	rjmp	.-330    	; 0x2b4 <main+0x10>
			{
				newKey < 16 ? SetIndicatorElevatorState(pressedFloor)
				: SetIndicatorFloorState(pressedFloor);
 3fe:	d0 31       	cpi	r29, 0x10	; 16
 400:	20 f4       	brcc	.+8      	; 0x40a <__FUSE_REGION_LENGTH__+0xa>
		if (pressedFloor <= 3 && pressedFloor != currentElevatorState)
		{
			// if call is saved to buffer, set indicators
			if (!AddRequestToBuffer(pressedFloor))
			{
				newKey < 16 ? SetIndicatorElevatorState(pressedFloor)
 402:	8c 2f       	mov	r24, r28
 404:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <SetIndicatorElevatorState>
 408:	55 cf       	rjmp	.-342    	; 0x2b4 <main+0x10>
				: SetIndicatorFloorState(pressedFloor);
 40a:	8c 2f       	mov	r24, r28
 40c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <SetIndicatorFloorState>
 410:	51 cf       	rjmp	.-350    	; 0x2b4 <main+0x10>

00000412 <MakeDoorStates>:
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	e5 e8       	ldi	r30, 0x85	; 133
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	2d e8       	ldi	r18, 0x8D	; 141
 41c:	30 e0       	ldi	r19, 0x00	; 0
 41e:	df 01       	movw	r26, r30
 420:	11 97       	sbiw	r26, 0x01	; 1
 422:	8c 91       	ld	r24, X
 424:	81 11       	cpse	r24, r1
 426:	06 c0       	rjmp	.+12     	; 0x434 <MakeDoorStates+0x22>
 428:	80 81       	ld	r24, Z
 42a:	18 16       	cp	r1, r24
 42c:	54 f4       	brge	.+20     	; 0x442 <MakeDoorStates+0x30>
 42e:	81 50       	subi	r24, 0x01	; 1
 430:	80 83       	st	Z, r24
 432:	07 c0       	rjmp	.+14     	; 0x442 <MakeDoorStates+0x30>
 434:	82 30       	cpi	r24, 0x02	; 2
 436:	29 f4       	brne	.+10     	; 0x442 <MakeDoorStates+0x30>
 438:	80 81       	ld	r24, Z
 43a:	84 30       	cpi	r24, 0x04	; 4
 43c:	14 f4       	brge	.+4      	; 0x442 <MakeDoorStates+0x30>
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	80 83       	st	Z, r24
 442:	32 96       	adiw	r30, 0x02	; 2
 444:	e2 17       	cp	r30, r18
 446:	f3 07       	cpc	r31, r19
 448:	51 f7       	brne	.-44     	; 0x41e <MakeDoorStates+0xc>
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <InitializePorts>:
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	87 bb       	out	0x17, r24	; 23
 454:	84 bb       	out	0x14, r24	; 20
 456:	8a bb       	out	0x1a, r24	; 26
 458:	11 ba       	out	0x11, r1	; 17
 45a:	08 95       	ret

0000045c <InitializeStart>:
 45c:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <liftPosDisplay_On>
 460:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <buttonLiftLed_on>
 464:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <liftDisplay7Seg_On>
 468:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <buttonFloorLed_On>
 46c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <doorframe>
 470:	e4 e8       	ldi	r30, 0x84	; 132
 472:	f0 e0       	ldi	r31, 0x00	; 0
 474:	11 82       	std	Z+1, r1	; 0x01
 476:	10 82       	st	Z, r1
 478:	13 82       	std	Z+3, r1	; 0x03
 47a:	12 82       	std	Z+2, r1	; 0x02
 47c:	15 82       	std	Z+5, r1	; 0x05
 47e:	14 82       	std	Z+4, r1	; 0x04
 480:	17 82       	std	Z+7, r1	; 0x07
 482:	16 82       	std	Z+6, r1	; 0x06
 484:	8f e1       	ldi	r24, 0x1F	; 31
 486:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <liftPosition>
 48a:	08 95       	ret

0000048c <SetOutput>:
 48c:	40 91 79 00 	lds	r20, 0x0079	; 0x800079 <doorOpeningRate>
 490:	50 91 7a 00 	lds	r21, 0x007A	; 0x80007a <doorOpeningRate+0x1>
 494:	9a 01       	movw	r18, r20
 496:	36 95       	lsr	r19
 498:	27 95       	ror	r18
 49a:	36 95       	lsr	r19
 49c:	27 95       	ror	r18
 49e:	36 95       	lsr	r19
 4a0:	27 95       	ror	r18
 4a2:	a7 e3       	ldi	r26, 0x37	; 55
 4a4:	ba e1       	ldi	r27, 0x1A	; 26
 4a6:	0e 94 17 04 	call	0x82e	; 0x82e <__umulhisi3>
 4aa:	00 24       	eor	r0, r0
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	00 1c       	adc	r0, r0
 4b2:	88 0f       	add	r24, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	00 1c       	adc	r0, r0
 4b8:	89 2f       	mov	r24, r25
 4ba:	90 2d       	mov	r25, r0
 4bc:	68 e8       	ldi	r22, 0x88	; 136
 4be:	73 e1       	ldi	r23, 0x13	; 19
 4c0:	86 9f       	mul	r24, r22
 4c2:	90 01       	movw	r18, r0
 4c4:	87 9f       	mul	r24, r23
 4c6:	30 0d       	add	r19, r0
 4c8:	96 9f       	mul	r25, r22
 4ca:	30 0d       	add	r19, r0
 4cc:	11 24       	eor	r1, r1
 4ce:	42 17       	cp	r20, r18
 4d0:	53 07       	cpc	r21, r19
 4d2:	31 f4       	brne	.+12     	; 0x4e0 <SetOutput+0x54>
 4d4:	0e 94 09 02 	call	0x412	; 0x412 <MakeDoorStates>
 4d8:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <doorOpeningRate+0x1>
 4dc:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <doorOpeningRate>
 4e0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <repetitionRate>
 4e4:	89 30       	cpi	r24, 0x09	; 9
 4e6:	09 f1       	breq	.+66     	; 0x52a <SetOutput+0x9e>
 4e8:	28 f4       	brcc	.+10     	; 0x4f4 <SetOutput+0x68>
 4ea:	83 30       	cpi	r24, 0x03	; 3
 4ec:	41 f0       	breq	.+16     	; 0x4fe <SetOutput+0x72>
 4ee:	86 30       	cpi	r24, 0x06	; 6
 4f0:	89 f0       	breq	.+34     	; 0x514 <SetOutput+0x88>
 4f2:	43 c0       	rjmp	.+134    	; 0x57a <SetOutput+0xee>
 4f4:	8c 30       	cpi	r24, 0x0C	; 12
 4f6:	21 f1       	breq	.+72     	; 0x540 <SetOutput+0xb4>
 4f8:	8d 30       	cpi	r24, 0x0D	; 13
 4fa:	69 f1       	breq	.+90     	; 0x556 <SetOutput+0xca>
 4fc:	3e c0       	rjmp	.+124    	; 0x57a <SetOutput+0xee>
 4fe:	e0 91 85 00 	lds	r30, 0x0085	; 0x800085 <liftDoorState+0x1>
 502:	0e 2e       	mov	r0, r30
 504:	00 0c       	add	r0, r0
 506:	ff 0b       	sbc	r31, r31
 508:	e7 59       	subi	r30, 0x97	; 151
 50a:	ff 4f       	sbci	r31, 0xFF	; 255
 50c:	80 81       	ld	r24, Z
 50e:	81 60       	ori	r24, 0x01	; 1
 510:	85 bb       	out	0x15, r24	; 21
 512:	33 c0       	rjmp	.+102    	; 0x57a <SetOutput+0xee>
 514:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <liftDoorState+0x3>
 518:	0e 2e       	mov	r0, r30
 51a:	00 0c       	add	r0, r0
 51c:	ff 0b       	sbc	r31, r31
 51e:	e7 59       	subi	r30, 0x97	; 151
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	80 81       	ld	r24, Z
 524:	82 60       	ori	r24, 0x02	; 2
 526:	85 bb       	out	0x15, r24	; 21
 528:	28 c0       	rjmp	.+80     	; 0x57a <SetOutput+0xee>
 52a:	e0 91 89 00 	lds	r30, 0x0089	; 0x800089 <liftDoorState+0x5>
 52e:	0e 2e       	mov	r0, r30
 530:	00 0c       	add	r0, r0
 532:	ff 0b       	sbc	r31, r31
 534:	e7 59       	subi	r30, 0x97	; 151
 536:	ff 4f       	sbci	r31, 0xFF	; 255
 538:	80 81       	ld	r24, Z
 53a:	84 60       	ori	r24, 0x04	; 4
 53c:	85 bb       	out	0x15, r24	; 21
 53e:	1d c0       	rjmp	.+58     	; 0x57a <SetOutput+0xee>
 540:	e0 91 8b 00 	lds	r30, 0x008B	; 0x80008b <liftDoorState+0x7>
 544:	0e 2e       	mov	r0, r30
 546:	00 0c       	add	r0, r0
 548:	ff 0b       	sbc	r31, r31
 54a:	e7 59       	subi	r30, 0x97	; 151
 54c:	ff 4f       	sbci	r31, 0xFF	; 255
 54e:	80 81       	ld	r24, Z
 550:	88 60       	ori	r24, 0x08	; 8
 552:	85 bb       	out	0x15, r24	; 21
 554:	12 c0       	rjmp	.+36     	; 0x57a <SetOutput+0xee>
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <repetitionRate>
 55c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <doorOpeningRate>
 560:	90 91 7a 00 	lds	r25, 0x007A	; 0x80007a <doorOpeningRate+0x1>
 564:	01 96       	adiw	r24, 0x01	; 1
 566:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <doorOpeningRate+0x1>
 56a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <doorOpeningRate>
 56e:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <displayCache>
 572:	91 11       	cpse	r25, r1
 574:	31 c0       	rjmp	.+98     	; 0x5d8 <SetOutput+0x14c>
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	56 c0       	rjmp	.+172    	; 0x626 <SetOutput+0x19a>
 57a:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <repetitionRate>
 57e:	8f 5f       	subi	r24, 0xFF	; 255
 580:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <repetitionRate>
 584:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <doorOpeningRate>
 588:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <doorOpeningRate+0x1>
 58c:	2f 5f       	subi	r18, 0xFF	; 255
 58e:	3f 4f       	sbci	r19, 0xFF	; 255
 590:	30 93 7a 00 	sts	0x007A, r19	; 0x80007a <doorOpeningRate+0x1>
 594:	20 93 79 00 	sts	0x0079, r18	; 0x800079 <doorOpeningRate>
 598:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <displayCache>
 59c:	99 23       	and	r25, r25
 59e:	09 f4       	brne	.+2      	; 0x5a2 <SetOutput+0x116>
 5a0:	47 c0       	rjmp	.+142    	; 0x630 <SetOutput+0x1a4>
 5a2:	2d ec       	ldi	r18, 0xCD	; 205
 5a4:	82 9f       	mul	r24, r18
 5a6:	21 2d       	mov	r18, r1
 5a8:	11 24       	eor	r1, r1
 5aa:	26 95       	lsr	r18
 5ac:	26 95       	lsr	r18
 5ae:	32 2f       	mov	r19, r18
 5b0:	33 0f       	add	r19, r19
 5b2:	33 0f       	add	r19, r19
 5b4:	23 0f       	add	r18, r19
 5b6:	82 1b       	sub	r24, r18
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	71 f0       	breq	.+28     	; 0x5d8 <SetOutput+0x14c>
 5bc:	28 f0       	brcs	.+10     	; 0x5c8 <SetOutput+0x13c>
 5be:	82 30       	cpi	r24, 0x02	; 2
 5c0:	b1 f0       	breq	.+44     	; 0x5ee <SetOutput+0x162>
 5c2:	83 30       	cpi	r24, 0x03	; 3
 5c4:	f9 f0       	breq	.+62     	; 0x604 <SetOutput+0x178>
 5c6:	28 c0       	rjmp	.+80     	; 0x618 <SetOutput+0x18c>
 5c8:	94 fd       	sbrc	r25, 4
 5ca:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <buttonLiftLed>
 5ce:	90 ff       	sbrs	r25, 0
 5d0:	23 c0       	rjmp	.+70     	; 0x618 <SetOutput+0x18c>
 5d2:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <buttonFloorLed>
 5d6:	20 c0       	rjmp	.+64     	; 0x618 <SetOutput+0x18c>
 5d8:	95 ff       	sbrs	r25, 5
 5da:	03 c0       	rjmp	.+6      	; 0x5e2 <SetOutput+0x156>
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <buttonLiftLed>
 5e2:	91 ff       	sbrs	r25, 1
 5e4:	19 c0       	rjmp	.+50     	; 0x618 <SetOutput+0x18c>
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <buttonFloorLed>
 5ec:	15 c0       	rjmp	.+42     	; 0x618 <SetOutput+0x18c>
 5ee:	96 ff       	sbrs	r25, 6
 5f0:	03 c0       	rjmp	.+6      	; 0x5f8 <SetOutput+0x16c>
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <buttonLiftLed>
 5f8:	92 ff       	sbrs	r25, 2
 5fa:	0e c0       	rjmp	.+28     	; 0x618 <SetOutput+0x18c>
 5fc:	82 e0       	ldi	r24, 0x02	; 2
 5fe:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <buttonFloorLed>
 602:	0a c0       	rjmp	.+20     	; 0x618 <SetOutput+0x18c>
 604:	99 23       	and	r25, r25
 606:	1c f4       	brge	.+6      	; 0x60e <SetOutput+0x182>
 608:	83 e0       	ldi	r24, 0x03	; 3
 60a:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <buttonLiftLed>
 60e:	93 ff       	sbrs	r25, 3
 610:	03 c0       	rjmp	.+6      	; 0x618 <SetOutput+0x18c>
 612:	83 e0       	ldi	r24, 0x03	; 3
 614:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <buttonFloorLed>
 618:	89 2f       	mov	r24, r25
 61a:	80 7f       	andi	r24, 0xF0	; 240
 61c:	19 f0       	breq	.+6      	; 0x624 <SetOutput+0x198>
 61e:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <buttonLiftLed_on>
 622:	01 c0       	rjmp	.+2      	; 0x626 <SetOutput+0x19a>
 624:	21 e0       	ldi	r18, 0x01	; 1
 626:	9f 70       	andi	r25, 0x0F	; 15
 628:	31 f0       	breq	.+12     	; 0x636 <SetOutput+0x1aa>
 62a:	90 91 91 00 	lds	r25, 0x0091	; 0x800091 <buttonFloorLed_On>
 62e:	04 c0       	rjmp	.+8      	; 0x638 <SetOutput+0x1ac>
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	01 c0       	rjmp	.+2      	; 0x638 <SetOutput+0x1ac>
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <liftPosDisplay_On>
 63c:	81 11       	cpse	r24, r1
 63e:	04 c0       	rjmp	.+8      	; 0x648 <SetOutput+0x1bc>
 640:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <liftPosition>
 644:	8f 73       	andi	r24, 0x3F	; 63
 646:	01 c0       	rjmp	.+2      	; 0x64a <SetOutput+0x1be>
 648:	8f e3       	ldi	r24, 0x3F	; 63
 64a:	80 93 8f 00 	sts	0x008F, r24	; 0x80008f <liftPositionPort>
 64e:	30 91 92 00 	lds	r19, 0x0092	; 0x800092 <liftDisplay7Seg_On>
 652:	31 11       	cpse	r19, r1
 654:	03 c0       	rjmp	.+6      	; 0x65c <SetOutput+0x1d0>
 656:	30 91 90 00 	lds	r19, 0x0090	; 0x800090 <liftDisplay7Seg>
 65a:	01 c0       	rjmp	.+2      	; 0x65e <SetOutput+0x1d2>
 65c:	37 e0       	ldi	r19, 0x07	; 7
 65e:	30 93 8c 00 	sts	0x008C, r19	; 0x80008c <floorDisplayPort>
 662:	30 e8       	ldi	r19, 0x80	; 128
 664:	23 9f       	mul	r18, r19
 666:	a0 01       	movw	r20, r0
 668:	11 24       	eor	r1, r1
 66a:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <doorframe>
 66e:	60 e4       	ldi	r22, 0x40	; 64
 670:	36 9f       	mul	r19, r22
 672:	90 01       	movw	r18, r0
 674:	11 24       	eor	r1, r1
 676:	24 2b       	or	r18, r20
 678:	82 2b       	or	r24, r18
 67a:	88 bb       	out	0x18, r24	; 24
 67c:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <buttonLiftLed>
 680:	82 2f       	mov	r24, r18
 682:	88 0f       	add	r24, r24
 684:	88 0f       	add	r24, r24
 686:	88 0f       	add	r24, r24
 688:	30 91 82 00 	lds	r19, 0x0082	; 0x800082 <buttonFloorLed>
 68c:	40 e2       	ldi	r20, 0x20	; 32
 68e:	34 9f       	mul	r19, r20
 690:	90 01       	movw	r18, r0
 692:	11 24       	eor	r1, r1
 694:	28 2b       	or	r18, r24
 696:	80 91 8c 00 	lds	r24, 0x008C	; 0x80008c <floorDisplayPort>
 69a:	28 2b       	or	r18, r24
 69c:	60 e8       	ldi	r22, 0x80	; 128
 69e:	96 9f       	mul	r25, r22
 6a0:	c0 01       	movw	r24, r0
 6a2:	11 24       	eor	r1, r1
 6a4:	82 2b       	or	r24, r18
 6a6:	8b bb       	out	0x1b, r24	; 27
 6a8:	08 95       	ret

000006aa <ReadKeyEvent>:
 6aa:	90 b3       	in	r25, 0x10	; 16
 6ac:	98 23       	and	r25, r24
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	09 f4       	brne	.+2      	; 0x6b4 <ReadKeyEvent+0xa>
 6b2:	80 e0       	ldi	r24, 0x00	; 0
 6b4:	08 95       	ret

000006b6 <ReadDoorState>:
 6b6:	e8 2f       	mov	r30, r24
 6b8:	f0 e0       	ldi	r31, 0x00	; 0
 6ba:	ee 0f       	add	r30, r30
 6bc:	ff 1f       	adc	r31, r31
 6be:	ec 57       	subi	r30, 0x7C	; 124
 6c0:	ff 4f       	sbci	r31, 0xFF	; 255
 6c2:	e1 81       	ldd	r30, Z+1	; 0x01
 6c4:	0e 2e       	mov	r0, r30
 6c6:	00 0c       	add	r0, r0
 6c8:	ff 0b       	sbc	r31, r31
 6ca:	e7 59       	subi	r30, 0x97	; 151
 6cc:	ff 4f       	sbci	r31, 0xFF	; 255
 6ce:	90 81       	ld	r25, Z
 6d0:	90 3f       	cpi	r25, 0xF0	; 240
 6d2:	29 f0       	breq	.+10     	; 0x6de <ReadDoorState+0x28>
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	91 11       	cpse	r25, r1
 6d8:	03 c0       	rjmp	.+6      	; 0x6e0 <ReadDoorState+0x2a>
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	08 95       	ret
 6de:	82 e0       	ldi	r24, 0x02	; 2
 6e0:	08 95       	ret

000006e2 <SetDoorState>:
 6e2:	e6 2f       	mov	r30, r22
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	ee 0f       	add	r30, r30
 6e8:	ff 1f       	adc	r31, r31
 6ea:	ec 57       	subi	r30, 0x7C	; 124
 6ec:	ff 4f       	sbci	r31, 0xFF	; 255
 6ee:	80 83       	st	Z, r24
 6f0:	08 95       	ret

000006f2 <MoveElevator>:
 6f2:	61 15       	cp	r22, r1
 6f4:	71 05       	cpc	r23, r1
 6f6:	19 f1       	breq	.+70     	; 0x73e <MoveElevator+0x4c>
 6f8:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <liftSpeed>
 6fc:	30 91 78 00 	lds	r19, 0x0078	; 0x800078 <liftSpeed+0x1>
 700:	62 17       	cp	r22, r18
 702:	73 07       	cpc	r23, r19
 704:	38 f0       	brcs	.+14     	; 0x714 <MoveElevator+0x22>
 706:	2f 5f       	subi	r18, 0xFF	; 255
 708:	3f 4f       	sbci	r19, 0xFF	; 255
 70a:	30 93 78 00 	sts	0x0078, r19	; 0x800078 <liftSpeed+0x1>
 70e:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <liftSpeed>
 712:	08 95       	ret
 714:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <liftSpeed+0x1>
 718:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <liftSpeed>
 71c:	81 30       	cpi	r24, 0x01	; 1
 71e:	41 f4       	brne	.+16     	; 0x730 <MoveElevator+0x3e>
 720:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <liftPosition>
 724:	81 33       	cpi	r24, 0x31	; 49
 726:	58 f4       	brcc	.+22     	; 0x73e <MoveElevator+0x4c>
 728:	8f 5f       	subi	r24, 0xFF	; 255
 72a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <liftPosition>
 72e:	08 95       	ret
 730:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <liftPosition>
 734:	88 23       	and	r24, r24
 736:	19 f0       	breq	.+6      	; 0x73e <MoveElevator+0x4c>
 738:	81 50       	subi	r24, 0x01	; 1
 73a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <liftPosition>
 73e:	08 95       	ret

00000740 <ReadElevatorState>:
 740:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <liftPosition>
 744:	90 31       	cpi	r25, 0x10	; 16
 746:	49 f0       	breq	.+18     	; 0x75a <ReadElevatorState+0x1a>
 748:	18 f4       	brcc	.+6      	; 0x750 <ReadElevatorState+0x10>
 74a:	99 23       	and	r25, r25
 74c:	a1 f0       	breq	.+40     	; 0x776 <ReadElevatorState+0x36>
 74e:	0b c0       	rjmp	.+22     	; 0x766 <ReadElevatorState+0x26>
 750:	90 32       	cpi	r25, 0x20	; 32
 752:	29 f0       	breq	.+10     	; 0x75e <ReadElevatorState+0x1e>
 754:	90 33       	cpi	r25, 0x30	; 48
 756:	29 f0       	breq	.+10     	; 0x762 <ReadElevatorState+0x22>
 758:	06 c0       	rjmp	.+12     	; 0x766 <ReadElevatorState+0x26>
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	11 c0       	rjmp	.+34     	; 0x780 <ReadElevatorState+0x40>
 75e:	82 e0       	ldi	r24, 0x02	; 2
 760:	0f c0       	rjmp	.+30     	; 0x780 <ReadElevatorState+0x40>
 762:	83 e0       	ldi	r24, 0x03	; 3
 764:	0d c0       	rjmp	.+26     	; 0x780 <ReadElevatorState+0x40>
 766:	91 33       	cpi	r25, 0x31	; 49
 768:	40 f4       	brcc	.+16     	; 0x77a <ReadElevatorState+0x3a>
 76a:	80 91 8e 00 	lds	r24, 0x008E	; 0x80008e <liftPositionCache>
 76e:	98 13       	cpse	r25, r24
 770:	06 c0       	rjmp	.+12     	; 0x77e <ReadElevatorState+0x3e>
 772:	85 e6       	ldi	r24, 0x65	; 101
 774:	05 c0       	rjmp	.+10     	; 0x780 <ReadElevatorState+0x40>
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	03 c0       	rjmp	.+6      	; 0x780 <ReadElevatorState+0x40>
 77a:	88 ec       	ldi	r24, 0xC8	; 200
 77c:	01 c0       	rjmp	.+2      	; 0x780 <ReadElevatorState+0x40>
 77e:	84 e6       	ldi	r24, 0x64	; 100
 780:	90 93 8e 00 	sts	0x008E, r25	; 0x80008e <liftPositionCache>
 784:	08 95       	ret

00000786 <CalibrateElevatorPosition>:
 786:	0e 94 a0 03 	call	0x740	; 0x740 <ReadElevatorState>
 78a:	88 23       	and	r24, r24
 78c:	29 f0       	breq	.+10     	; 0x798 <CalibrateElevatorPosition+0x12>
 78e:	68 ee       	ldi	r22, 0xE8	; 232
 790:	73 e0       	ldi	r23, 0x03	; 3
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <MoveElevator>
 798:	08 95       	ret

0000079a <SetDisplay>:
 79a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <liftDisplay7Seg>
 79e:	08 95       	ret

000007a0 <SetIndicatorFloorState>:
 7a0:	84 30       	cpi	r24, 0x04	; 4
 7a2:	70 f4       	brcc	.+28     	; 0x7c0 <SetIndicatorFloorState+0x20>
 7a4:	21 e0       	ldi	r18, 0x01	; 1
 7a6:	30 e0       	ldi	r19, 0x00	; 0
 7a8:	a9 01       	movw	r20, r18
 7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <SetIndicatorFloorState+0x10>
 7ac:	44 0f       	add	r20, r20
 7ae:	55 1f       	adc	r21, r21
 7b0:	8a 95       	dec	r24
 7b2:	e2 f7       	brpl	.-8      	; 0x7ac <SetIndicatorFloorState+0xc>
 7b4:	ca 01       	movw	r24, r20
 7b6:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <displayCache>
 7ba:	89 2b       	or	r24, r25
 7bc:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <displayCache>
 7c0:	08 95       	ret

000007c2 <SetIndicatorElevatorState>:
 7c2:	84 30       	cpi	r24, 0x04	; 4
 7c4:	78 f4       	brcc	.+30     	; 0x7e4 <SetIndicatorElevatorState+0x22>
 7c6:	8c 5f       	subi	r24, 0xFC	; 252
 7c8:	21 e0       	ldi	r18, 0x01	; 1
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	a9 01       	movw	r20, r18
 7ce:	02 c0       	rjmp	.+4      	; 0x7d4 <SetIndicatorElevatorState+0x12>
 7d0:	44 0f       	add	r20, r20
 7d2:	55 1f       	adc	r21, r21
 7d4:	8a 95       	dec	r24
 7d6:	e2 f7       	brpl	.-8      	; 0x7d0 <SetIndicatorElevatorState+0xe>
 7d8:	ca 01       	movw	r24, r20
 7da:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <displayCache>
 7de:	89 2b       	or	r24, r25
 7e0:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <displayCache>
 7e4:	08 95       	ret

000007e6 <ClrIndicatorFloorState>:
 7e6:	84 30       	cpi	r24, 0x04	; 4
 7e8:	78 f4       	brcc	.+30     	; 0x808 <ClrIndicatorFloorState+0x22>
 7ea:	21 e0       	ldi	r18, 0x01	; 1
 7ec:	30 e0       	ldi	r19, 0x00	; 0
 7ee:	a9 01       	movw	r20, r18
 7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <ClrIndicatorFloorState+0x10>
 7f2:	44 0f       	add	r20, r20
 7f4:	55 1f       	adc	r21, r21
 7f6:	8a 95       	dec	r24
 7f8:	e2 f7       	brpl	.-8      	; 0x7f2 <ClrIndicatorFloorState+0xc>
 7fa:	ca 01       	movw	r24, r20
 7fc:	80 95       	com	r24
 7fe:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <displayCache>
 802:	89 23       	and	r24, r25
 804:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <displayCache>
 808:	08 95       	ret

0000080a <ClrIndicatorElevatorState>:
 80a:	84 30       	cpi	r24, 0x04	; 4
 80c:	78 f4       	brcc	.+30     	; 0x82c <ClrIndicatorElevatorState+0x22>
 80e:	24 e0       	ldi	r18, 0x04	; 4
 810:	28 0f       	add	r18, r24
 812:	81 e0       	ldi	r24, 0x01	; 1
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	02 c0       	rjmp	.+4      	; 0x81c <ClrIndicatorElevatorState+0x12>
 818:	88 0f       	add	r24, r24
 81a:	99 1f       	adc	r25, r25
 81c:	2a 95       	dec	r18
 81e:	e2 f7       	brpl	.-8      	; 0x818 <ClrIndicatorElevatorState+0xe>
 820:	80 95       	com	r24
 822:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <displayCache>
 826:	89 23       	and	r24, r25
 828:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <displayCache>
 82c:	08 95       	ret

0000082e <__umulhisi3>:
 82e:	a2 9f       	mul	r26, r18
 830:	b0 01       	movw	r22, r0
 832:	b3 9f       	mul	r27, r19
 834:	c0 01       	movw	r24, r0
 836:	a3 9f       	mul	r26, r19
 838:	70 0d       	add	r23, r0
 83a:	81 1d       	adc	r24, r1
 83c:	11 24       	eor	r1, r1
 83e:	91 1d       	adc	r25, r1
 840:	b2 9f       	mul	r27, r18
 842:	70 0d       	add	r23, r0
 844:	81 1d       	adc	r24, r1
 846:	11 24       	eor	r1, r1
 848:	91 1d       	adc	r25, r1
 84a:	08 95       	ret

0000084c <_exit>:
 84c:	f8 94       	cli

0000084e <__stop_program>:
 84e:	ff cf       	rjmp	.-2      	; 0x84e <__stop_program>
