
Liftsumulator_Basic_V1_AufgabeC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000076a  000007fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000023  00800068  00800068  00000806  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000806  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000868  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d45  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003df  00000000  00000000  000016d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000099b  00000000  00000000  00001ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c8  00000000  00000000  0000244c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000808  00000000  00000000  00002614  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000054d  00000000  00000000  00002e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003369  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e6       	ldi	r30, 0x6A	; 106
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <main>
  8a:	0c 94 b3 03 	jmp	0x766	; 0x766 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AddButtonToBuffer>:
*******************************************************************************/

// Add a Button to the circular buffer
uint8_t AddButtonToBuffer(ButtonType button) {
    // Avoid and set write to 0
    if (callBuffer.write >= BUFFER_SIZE) {
  92:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end+0x4>
  96:	93 30       	cpi	r25, 0x03	; 3
  98:	10 f0       	brcs	.+4      	; 0x9e <AddButtonToBuffer+0xc>
        callBuffer.write = 0;
  9a:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end+0x4>
    }
        
    if ( ( callBuffer.write + 1 == callBuffer.read) || ( callBuffer.read == 0 && callBuffer.write + 1 == BUFFER_SIZE ) ) {
  9e:	e8 e6       	ldi	r30, 0x68	; 104
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	94 81       	ldd	r25, Z+4	; 0x04
  a4:	29 2f       	mov	r18, r25
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	43 81       	ldd	r20, Z+3	; 0x03
  aa:	f9 01       	movw	r30, r18
  ac:	31 96       	adiw	r30, 0x01	; 1
  ae:	64 2f       	mov	r22, r20
  b0:	70 e0       	ldi	r23, 0x00	; 0
  b2:	e6 17       	cp	r30, r22
  b4:	f7 07       	cpc	r31, r23
  b6:	99 f0       	breq	.+38     	; 0xde <AddButtonToBuffer+0x4c>
  b8:	41 11       	cpse	r20, r1
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <AddButtonToBuffer+0x2e>
  bc:	92 30       	cpi	r25, 0x02	; 2
  be:	89 f0       	breq	.+34     	; 0xe2 <AddButtonToBuffer+0x50>
        // callBuffer is filled
        return BUFFER_FAIL;
    }
        
    callBuffer.data[callBuffer.write] = button;
  c0:	f9 01       	movw	r30, r18
  c2:	e8 59       	subi	r30, 0x98	; 152
  c4:	ff 4f       	sbci	r31, 0xFF	; 255
  c6:	80 83       	st	Z, r24
    callBuffer.write++;
  c8:	9f 5f       	subi	r25, 0xFF	; 255
    if (callBuffer.write >= BUFFER_SIZE){
  ca:	93 30       	cpi	r25, 0x03	; 3
  cc:	20 f4       	brcc	.+8      	; 0xd6 <AddButtonToBuffer+0x44>
        // callBuffer is filled
        return BUFFER_FAIL;
    }
        
    callBuffer.data[callBuffer.write] = button;
    callBuffer.write++;
  ce:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__data_end+0x4>
    if (callBuffer.write >= BUFFER_SIZE){
        // safety first
        callBuffer.write = 0;
    }
        
    return BUFFER_SUCCESS;
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	08 95       	ret
        
    callBuffer.data[callBuffer.write] = button;
    callBuffer.write++;
    if (callBuffer.write >= BUFFER_SIZE){
        // safety first
        callBuffer.write = 0;
  d6:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end+0x4>
    }
        
    return BUFFER_SUCCESS;
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	08 95       	ret
        callBuffer.write = 0;
    }
        
    if ( ( callBuffer.write + 1 == callBuffer.read) || ( callBuffer.read == 0 && callBuffer.write + 1 == BUFFER_SIZE ) ) {
        // callBuffer is filled
        return BUFFER_FAIL;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	08 95       	ret
  e2:	81 e0       	ldi	r24, 0x01	; 1
        // safety first
        callBuffer.write = 0;
    }
        
    return BUFFER_SUCCESS;
}
  e4:	08 95       	ret

000000e6 <GetButtonFromBuffer>:
// Get a Button from the circular buffer
uint8_t GetButtonFromBuffer(ButtonType *button) {
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	ec 01       	movw	r28, r24
    if (callBuffer.read == callBuffer.write) {
  ec:	a8 e6       	ldi	r26, 0x68	; 104
  ee:	b0 e0       	ldi	r27, 0x00	; 0
  f0:	13 96       	adiw	r26, 0x03	; 3
  f2:	ec 91       	ld	r30, X
  f4:	13 97       	sbiw	r26, 0x03	; 3
  f6:	14 96       	adiw	r26, 0x04	; 4
  f8:	9c 91       	ld	r25, X
  fa:	e9 17       	cp	r30, r25
  fc:	91 f0       	breq	.+36     	; 0x122 <GetButtonFromBuffer+0x3c>
        return BUFFER_FAIL;
    }
        
    *button = callBuffer.data[callBuffer.read];
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	e8 59       	subi	r30, 0x98	; 152
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	80 81       	ld	r24, Z
 106:	88 83       	st	Y, r24
    callBuffer.read++;
 108:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__data_end+0x3>
 10c:	8f 5f       	subi	r24, 0xFF	; 255
    if (callBuffer.read >= BUFFER_SIZE) {
 10e:	83 30       	cpi	r24, 0x03	; 3
 110:	20 f4       	brcc	.+8      	; 0x11a <GetButtonFromBuffer+0x34>
    if (callBuffer.read == callBuffer.write) {
        return BUFFER_FAIL;
    }
        
    *button = callBuffer.data[callBuffer.read];
    callBuffer.read++;
 112:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__data_end+0x3>
    if (callBuffer.read >= BUFFER_SIZE) {
        callBuffer.read = 0;
    }
        
    return BUFFER_SUCCESS;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	05 c0       	rjmp	.+10     	; 0x124 <GetButtonFromBuffer+0x3e>
    }
        
    *button = callBuffer.data[callBuffer.read];
    callBuffer.read++;
    if (callBuffer.read >= BUFFER_SIZE) {
        callBuffer.read = 0;
 11a:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>
    }
        
    return BUFFER_SUCCESS;
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	01 c0       	rjmp	.+2      	; 0x124 <GetButtonFromBuffer+0x3e>
    return BUFFER_SUCCESS;
}
// Get a Button from the circular buffer
uint8_t GetButtonFromBuffer(ButtonType *button) {
    if (callBuffer.read == callBuffer.write) {
        return BUFFER_FAIL;
 122:	81 e0       	ldi	r24, 0x01	; 1
    if (callBuffer.read >= BUFFER_SIZE) {
        callBuffer.read = 0;
    }
        
    return BUFFER_SUCCESS;
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <GetSpeedType>:

// Get the speed of the elevator depending on its position
SpeedType GetSpeedType() {
    SpeedType speed = Stop;
    
    if (currLiftPos < 2 || requLiftPos - 2 < currLiftPos) {
 12a:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <currLiftPos>
 12e:	22 30       	cpi	r18, 0x02	; 2
 130:	a0 f0       	brcs	.+40     	; 0x15a <GetSpeedType+0x30>
 132:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <requLiftPos>
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	42 2f       	mov	r20, r18
 13a:	50 e0       	ldi	r21, 0x00	; 0
 13c:	bc 01       	movw	r22, r24
 13e:	62 50       	subi	r22, 0x02	; 2
 140:	71 09       	sbc	r23, r1
 142:	64 17       	cp	r22, r20
 144:	75 07       	cpc	r23, r21
 146:	64 f0       	brlt	.+24     	; 0x160 <GetSpeedType+0x36>
        speed = Slow;
    } else if(currLiftPos < 5 || requLiftPos - 5 < currLiftPos) {
 148:	25 30       	cpi	r18, 0x05	; 5
 14a:	68 f0       	brcs	.+26     	; 0x166 <GetSpeedType+0x3c>
 14c:	05 97       	sbiw	r24, 0x05	; 5
 14e:	84 17       	cp	r24, r20
 150:	95 07       	cpc	r25, r21
 152:	64 f0       	brlt	.+24     	; 0x16c <GetSpeedType+0x42>
        speed = Medium;
    } else {
        speed = Fast;
 154:	88 ee       	ldi	r24, 0xE8	; 232
 156:	93 e0       	ldi	r25, 0x03	; 3
 158:	08 95       	ret
// Get the speed of the elevator depending on its position
SpeedType GetSpeedType() {
    SpeedType speed = Stop;
    
    if (currLiftPos < 2 || requLiftPos - 2 < currLiftPos) {
        speed = Slow;
 15a:	80 ea       	ldi	r24, 0xA0	; 160
 15c:	9f e0       	ldi	r25, 0x0F	; 15
 15e:	08 95       	ret
 160:	80 ea       	ldi	r24, 0xA0	; 160
 162:	9f e0       	ldi	r25, 0x0F	; 15
 164:	08 95       	ret
    } else if(currLiftPos < 5 || requLiftPos - 5 < currLiftPos) {
        speed = Medium;
 166:	80 ed       	ldi	r24, 0xD0	; 208
 168:	97 e0       	ldi	r25, 0x07	; 7
 16a:	08 95       	ret
 16c:	80 ed       	ldi	r24, 0xD0	; 208
 16e:	97 e0       	ldi	r25, 0x07	; 7
    } else {
        speed = Fast;
    }
    
    return speed;
}
 170:	08 95       	ret

00000172 <ConvertButtonTypeToLiftPosType>:
// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
    LiftPosType retVal = None;

    switch (button)
 172:	88 30       	cpi	r24, 0x08	; 8
 174:	c9 f0       	breq	.+50     	; 0x1a8 <ConvertButtonTypeToLiftPosType+0x36>
 176:	38 f4       	brcc	.+14     	; 0x186 <ConvertButtonTypeToLiftPosType+0x14>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	91 f0       	breq	.+36     	; 0x1a0 <ConvertButtonTypeToLiftPosType+0x2e>
 17c:	84 30       	cpi	r24, 0x04	; 4
 17e:	91 f0       	breq	.+36     	; 0x1a4 <ConvertButtonTypeToLiftPosType+0x32>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	a1 f4       	brne	.+40     	; 0x1ac <ConvertButtonTypeToLiftPosType+0x3a>
 184:	0b c0       	rjmp	.+22     	; 0x19c <ConvertButtonTypeToLiftPosType+0x2a>
 186:	80 32       	cpi	r24, 0x20	; 32
 188:	59 f0       	breq	.+22     	; 0x1a0 <ConvertButtonTypeToLiftPosType+0x2e>
 18a:	18 f4       	brcc	.+6      	; 0x192 <ConvertButtonTypeToLiftPosType+0x20>
 18c:	80 31       	cpi	r24, 0x10	; 16
 18e:	31 f0       	breq	.+12     	; 0x19c <ConvertButtonTypeToLiftPosType+0x2a>
 190:	0d c0       	rjmp	.+26     	; 0x1ac <ConvertButtonTypeToLiftPosType+0x3a>
 192:	80 34       	cpi	r24, 0x40	; 64
 194:	39 f0       	breq	.+14     	; 0x1a4 <ConvertButtonTypeToLiftPosType+0x32>
 196:	80 38       	cpi	r24, 0x80	; 128
 198:	39 f0       	breq	.+14     	; 0x1a8 <ConvertButtonTypeToLiftPosType+0x36>
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <ConvertButtonTypeToLiftPosType+0x3a>
    {
        case LiftButton_F0:
        case FloorButton_F0:
        {
            retVal = Floor0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	08 95       	ret
            break;
        }
        case LiftButton_F1:
        case FloorButton_F1:
        {
            retVal = Floor1;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
            break;
 1a2:	08 95       	ret
        }
        case LiftButton_F2:
        case FloorButton_F2:
        {
            retVal = Floor2;
 1a4:	82 e0       	ldi	r24, 0x02	; 2
            break;
 1a6:	08 95       	ret
        }
        case LiftButton_F3:
        case FloorButton_F3:
        {
            retVal = Floor3;
 1a8:	83 e0       	ldi	r24, 0x03	; 3
            break;
 1aa:	08 95       	ret
}

// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
    LiftPosType retVal = None;
 1ac:	87 e0       	ldi	r24, 0x07	; 7
            break;
        }
    }

    return retVal;
}
 1ae:	08 95       	ret

000001b0 <CheckKeyEvent>:

// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
 1b0:	cf 93       	push	r28
    ButtonType retVal = EmergencyButton;

    for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
 1b2:	c0 e8       	ldi	r28, 0x80	; 128
 1b4:	01 c0       	rjmp	.+2      	; 0x1b8 <CheckKeyEvent+0x8>
 1b6:	c8 2f       	mov	r28, r24
    {
        if (ReadKeyEvent(key) == Pressed)
 1b8:	8c 2f       	mov	r24, r28
 1ba:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <ReadKeyEvent>
 1be:	81 30       	cpi	r24, 0x01	; 1
 1c0:	31 f4       	brne	.+12     	; 0x1ce <CheckKeyEvent+0x1e>
// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
    ButtonType retVal = EmergencyButton;

    for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
 1c2:	8c 2f       	mov	r24, r28
 1c4:	86 95       	lsr	r24
 1c6:	29 f0       	breq	.+10     	; 0x1d2 <CheckKeyEvent+0x22>
 1c8:	cc 23       	and	r28, r28
 1ca:	a9 f3       	breq	.-22     	; 0x1b6 <CheckKeyEvent+0x6>
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <CheckKeyEvent+0x22>
 1ce:	c6 95       	lsr	r28
 1d0:	99 f7       	brne	.-26     	; 0x1b8 <CheckKeyEvent+0x8>
        {
            retVal = key;
        }
    }
    return retVal;
}
 1d2:	8c 2f       	mov	r24, r28
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <UpdateDisplay>:

// Update the 7-Seg. display
void UpdateDisplay (LiftPosType elevatorState)
{
    switch (elevatorState)
 1d8:	85 30       	cpi	r24, 0x05	; 5
 1da:	10 f0       	brcs	.+4      	; 0x1e0 <UpdateDisplay+0x8>
 1dc:	86 30       	cpi	r24, 0x06	; 6
 1de:	11 f4       	brne	.+4      	; 0x1e4 <UpdateDisplay+0xc>
        case Floor2:
        case Floor3:
        case Error:
        case Test:
        {
            SetDisplay(elevatorState);
 1e0:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <SetDisplay>
 1e4:	08 95       	ret

000001e6 <main>:

/*******************************************************************************
*** MAIN PROGRAM
*******************************************************************************/
int main(void)
{
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	1f 92       	push	r1
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62

    InitializePorts();  // Initialization of ports
 1f0:	0e 94 b5 01 	call	0x36a	; 0x36a <InitializePorts>
    InitializeStart();  // Set start state of the system
 1f4:	0e 94 bb 01 	call	0x376	; 0x376 <InitializeStart>
                {
                    SetDoorState(Closed, currentElevatorState);
                }
                else
                {
                    state = MoveLift;
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f3 e0       	ldi	r31, 0x03	; 3
 1fc:	ff 2e       	mov	r15, r31
 1fe:	f0 2d       	mov	r31, r0
                {
                    MoveElevator(elevatorDirection, GetSpeedType());
                }
                else
                {
                    state = OpenDoor;
 200:	04 e0       	ldi	r16, 0x04	; 4
            {
                // Open the door and wait still the door is open completely
                SetDoorState(Open, currentElevatorState);
                if (ReadDoorState(currentElevatorState) == Open)
                {
                    state = Waiting;
 202:	ee 24       	eor	r14, r14
 204:	e3 94       	inc	r14

    // Endless loop
    while(1)
    {
        // do always
        UpdateDisplay(currentElevatorState);  // Update the 7-Seg. display (lift)
 206:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 20a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <UpdateDisplay>
        currentElevatorState = ReadElevatorState();
 20e:	0e 94 2d 03 	call	0x65a	; 0x65a <ReadElevatorState>
 212:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
        SetOutput();               // Send the calculated output values to the ports
 216:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <SetOutput>

        ButtonType newKey = CheckKeyEvent();
 21a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <CheckKeyEvent>

        if (EmergencyButton != newKey) {
 21e:	81 11       	cpse	r24, r1
            AddButtonToBuffer(newKey);
 220:	0e 94 49 00 	call	0x92	; 0x92 <AddButtonToBuffer>
        }

        // Handling state machine
        switch (state)
 224:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <state>
 228:	82 30       	cpi	r24, 0x02	; 2
 22a:	09 f4       	brne	.+2      	; 0x22e <main+0x48>
 22c:	48 c0       	rjmp	.+144    	; 0x2be <main+0xd8>
 22e:	28 f4       	brcc	.+10     	; 0x23a <main+0x54>
 230:	88 23       	and	r24, r24
 232:	51 f0       	breq	.+20     	; 0x248 <main+0x62>
 234:	81 30       	cpi	r24, 0x01	; 1
 236:	b1 f0       	breq	.+44     	; 0x264 <main+0x7e>
 238:	e6 cf       	rjmp	.-52     	; 0x206 <main+0x20>
 23a:	83 30       	cpi	r24, 0x03	; 3
 23c:	09 f4       	brne	.+2      	; 0x240 <main+0x5a>
 23e:	4e c0       	rjmp	.+156    	; 0x2dc <main+0xf6>
 240:	84 30       	cpi	r24, 0x04	; 4
 242:	09 f4       	brne	.+2      	; 0x246 <main+0x60>
 244:	5c c0       	rjmp	.+184    	; 0x2fe <main+0x118>
 246:	df cf       	rjmp	.-66     	; 0x206 <main+0x20>
        {
            case Uninitialized:
            {
                // Lift position calibration to ground floor (Floor0)
                if (ReadElevatorState() != Floor0)
 248:	0e 94 2d 03 	call	0x65a	; 0x65a <ReadElevatorState>
 24c:	88 23       	and	r24, r24
 24e:	19 f0       	breq	.+6      	; 0x256 <main+0x70>
                {
                    CalibrateElevatorPosition();
 250:	0e 94 50 03 	call	0x6a0	; 0x6a0 <CalibrateElevatorPosition>
 254:	d8 cf       	rjmp	.-80     	; 0x206 <main+0x20>
                }
                else
                {
                    state = OpenDoor;
 256:	00 93 70 00 	sts	0x0070, r16	; 0x800070 <state>
                    currentElevatorState = ReadElevatorState();
 25a:	0e 94 2d 03 	call	0x65a	; 0x65a <ReadElevatorState>
 25e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 262:	d1 cf       	rjmp	.-94     	; 0x206 <main+0x20>

            case Waiting:
            {
                ButtonType key;
                // Waiting for new floor request
                if (!GetButtonFromBuffer(&key))
 264:	ce 01       	movw	r24, r28
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	0e 94 73 00 	call	0xe6	; 0xe6 <GetButtonFromBuffer>
 26c:	81 11       	cpse	r24, r1
 26e:	cb cf       	rjmp	.-106    	; 0x206 <main+0x20>
                {
                    // button was pressed
                    requestedElevatorPosition = ConvertButtonTypeToLiftPosType(key);
 270:	19 81       	ldd	r17, Y+1	; 0x01
 272:	81 2f       	mov	r24, r17
 274:	0e 94 b9 00 	call	0x172	; 0x172 <ConvertButtonTypeToLiftPosType>
 278:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <requestedElevatorPosition>
                    int result = currentElevatorState - requestedElevatorPosition;
 27c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 280:	30 e0       	ldi	r19, 0x00	; 0
 282:	28 1b       	sub	r18, r24
 284:	31 09       	sbc	r19, r1
                    if (result != 0)
 286:	09 f4       	brne	.+2      	; 0x28a <main+0xa4>
 288:	be cf       	rjmp	.-132    	; 0x206 <main+0x20>
                    {
                        if (result < 0) {
 28a:	32 f4       	brpl	.+12     	; 0x298 <main+0xb2>
                            elevatorDirection = Up;
 28c:	e0 92 6f 00 	sts	0x006F, r14	; 0x80006f <elevatorDirection>
                            result *= -1;
 290:	31 95       	neg	r19
 292:	21 95       	neg	r18
 294:	31 09       	sbc	r19, r1
 296:	02 c0       	rjmp	.+4      	; 0x29c <main+0xb6>
                        } else {
                            elevatorDirection = Down;
 298:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <elevatorDirection>
                        }
                        requLiftPos = STEPS * result;
 29c:	22 95       	swap	r18
 29e:	20 7f       	andi	r18, 0xF0	; 240
 2a0:	20 93 6d 00 	sts	0x006D, r18	; 0x80006d <requLiftPos>
                        currLiftPos = 0;
 2a4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <currLiftPos>
                        
                        if (key < 16)
 2a8:	10 31       	cpi	r17, 0x10	; 16
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <main+0xcc>
                        {
                            SetIndicatorElevatorState(requestedElevatorPosition);
 2ac:	0e 94 6e 03 	call	0x6dc	; 0x6dc <SetIndicatorElevatorState>
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <main+0xd0>
                        }
                        else
                        {
                            SetIndicatorFloorState(requestedElevatorPosition);
 2b2:	0e 94 5d 03 	call	0x6ba	; 0x6ba <SetIndicatorFloorState>
                        }
                        state = CloseDoor;
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <state>
 2bc:	a4 cf       	rjmp	.-184    	; 0x206 <main+0x20>


            case CloseDoor:
            {
                // Close the door and wait until the door is closed
                if (ReadDoorState(currentElevatorState) != Closed)
 2be:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2c2:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ReadDoorState>
 2c6:	88 23       	and	r24, r24
 2c8:	31 f0       	breq	.+12     	; 0x2d6 <main+0xf0>
                {
                    SetDoorState(Closed, currentElevatorState);
 2ca:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SetDoorState>
 2d4:	98 cf       	rjmp	.-208    	; 0x206 <main+0x20>
                }
                else
                {
                    state = MoveLift;
 2d6:	f0 92 70 00 	sts	0x0070, r15	; 0x800070 <state>
 2da:	95 cf       	rjmp	.-214    	; 0x206 <main+0x20>


            case MoveLift:
            {
                // Move cabin to the requested floor
                if (currentElevatorState != requestedElevatorPosition)
 2dc:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 2e0:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <requestedElevatorPosition>
 2e4:	98 17       	cp	r25, r24
 2e6:	41 f0       	breq	.+16     	; 0x2f8 <main+0x112>
                {
                    MoveElevator(elevatorDirection, GetSpeedType());
 2e8:	0e 94 95 00 	call	0x12a	; 0x12a <GetSpeedType>
 2ec:	bc 01       	movw	r22, r24
 2ee:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <elevatorDirection>
 2f2:	0e 94 06 03 	call	0x60c	; 0x60c <MoveElevator>
 2f6:	87 cf       	rjmp	.-242    	; 0x206 <main+0x20>
                }
                else
                {
                    state = OpenDoor;
 2f8:	00 93 70 00 	sts	0x0070, r16	; 0x800070 <state>
 2fc:	84 cf       	rjmp	.-248    	; 0x206 <main+0x20>


            case OpenDoor:
            {
                // Open the door and wait still the door is open completely
                SetDoorState(Open, currentElevatorState);
 2fe:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 fe 02 	call	0x5fc	; 0x5fc <SetDoorState>
                if (ReadDoorState(currentElevatorState) == Open)
 308:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 30c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <ReadDoorState>
 310:	82 30       	cpi	r24, 0x02	; 2
 312:	09 f0       	breq	.+2      	; 0x316 <main+0x130>
 314:	78 cf       	rjmp	.-272    	; 0x206 <main+0x20>
                {
                    state = Waiting;
 316:	e0 92 70 00 	sts	0x0070, r14	; 0x800070 <state>
                    ClrIndicatorFloorState(currentElevatorState);
 31a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 31e:	0e 94 80 03 	call	0x700	; 0x700 <ClrIndicatorFloorState>
                    ClrIndicatorElevatorState(currentElevatorState);
 322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 326:	0e 94 92 03 	call	0x724	; 0x724 <ClrIndicatorElevatorState>
 32a:	6d cf       	rjmp	.-294    	; 0x206 <main+0x20>

0000032c <MakeDoorStates>:
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	ed e7       	ldi	r30, 0x7D	; 125
 332:	f0 e0       	ldi	r31, 0x00	; 0
 334:	25 e8       	ldi	r18, 0x85	; 133
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	df 01       	movw	r26, r30
 33a:	11 97       	sbiw	r26, 0x01	; 1
 33c:	8c 91       	ld	r24, X
 33e:	81 11       	cpse	r24, r1
 340:	06 c0       	rjmp	.+12     	; 0x34e <MakeDoorStates+0x22>
 342:	80 81       	ld	r24, Z
 344:	18 16       	cp	r1, r24
 346:	54 f4       	brge	.+20     	; 0x35c <MakeDoorStates+0x30>
 348:	81 50       	subi	r24, 0x01	; 1
 34a:	80 83       	st	Z, r24
 34c:	07 c0       	rjmp	.+14     	; 0x35c <MakeDoorStates+0x30>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	29 f4       	brne	.+10     	; 0x35c <MakeDoorStates+0x30>
 352:	80 81       	ld	r24, Z
 354:	84 30       	cpi	r24, 0x04	; 4
 356:	14 f4       	brge	.+4      	; 0x35c <MakeDoorStates+0x30>
 358:	8f 5f       	subi	r24, 0xFF	; 255
 35a:	80 83       	st	Z, r24
 35c:	32 96       	adiw	r30, 0x02	; 2
 35e:	e2 17       	cp	r30, r18
 360:	f3 07       	cpc	r31, r19
 362:	51 f7       	brne	.-44     	; 0x338 <MakeDoorStates+0xc>
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <InitializePorts>:
 36a:	8f ef       	ldi	r24, 0xFF	; 255
 36c:	87 bb       	out	0x17, r24	; 23
 36e:	84 bb       	out	0x14, r24	; 20
 370:	8a bb       	out	0x1a, r24	; 26
 372:	11 ba       	out	0x11, r1	; 17
 374:	08 95       	ret

00000376 <InitializeStart>:
 376:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <liftPosDisplay_On>
 37a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <buttonLiftLed_on>
 37e:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <liftDisplay7Seg_On>
 382:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <buttonFloorLed_On>
 386:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <doorframe>
 38a:	ec e7       	ldi	r30, 0x7C	; 124
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	11 82       	std	Z+1, r1	; 0x01
 390:	10 82       	st	Z, r1
 392:	13 82       	std	Z+3, r1	; 0x03
 394:	12 82       	std	Z+2, r1	; 0x02
 396:	15 82       	std	Z+5, r1	; 0x05
 398:	14 82       	std	Z+4, r1	; 0x04
 39a:	17 82       	std	Z+7, r1	; 0x07
 39c:	16 82       	std	Z+6, r1	; 0x06
 39e:	8f e1       	ldi	r24, 0x1F	; 31
 3a0:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <liftPosition>
 3a4:	08 95       	ret

000003a6 <SetOutput>:
 3a6:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <doorOpeningRate>
 3aa:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <doorOpeningRate+0x1>
 3ae:	9a 01       	movw	r18, r20
 3b0:	36 95       	lsr	r19
 3b2:	27 95       	ror	r18
 3b4:	36 95       	lsr	r19
 3b6:	27 95       	ror	r18
 3b8:	36 95       	lsr	r19
 3ba:	27 95       	ror	r18
 3bc:	a7 e3       	ldi	r26, 0x37	; 55
 3be:	ba e1       	ldi	r27, 0x1A	; 26
 3c0:	0e 94 a4 03 	call	0x748	; 0x748 <__umulhisi3>
 3c4:	00 24       	eor	r0, r0
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	00 1c       	adc	r0, r0
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	00 1c       	adc	r0, r0
 3d2:	89 2f       	mov	r24, r25
 3d4:	90 2d       	mov	r25, r0
 3d6:	68 e8       	ldi	r22, 0x88	; 136
 3d8:	73 e1       	ldi	r23, 0x13	; 19
 3da:	86 9f       	mul	r24, r22
 3dc:	90 01       	movw	r18, r0
 3de:	87 9f       	mul	r24, r23
 3e0:	30 0d       	add	r19, r0
 3e2:	96 9f       	mul	r25, r22
 3e4:	30 0d       	add	r19, r0
 3e6:	11 24       	eor	r1, r1
 3e8:	42 17       	cp	r20, r18
 3ea:	53 07       	cpc	r21, r19
 3ec:	31 f4       	brne	.+12     	; 0x3fa <SetOutput+0x54>
 3ee:	0e 94 96 01 	call	0x32c	; 0x32c <MakeDoorStates>
 3f2:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <doorOpeningRate+0x1>
 3f6:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <doorOpeningRate>
 3fa:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <repetitionRate>
 3fe:	89 30       	cpi	r24, 0x09	; 9
 400:	09 f1       	breq	.+66     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
 402:	28 f4       	brcc	.+10     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 404:	83 30       	cpi	r24, 0x03	; 3
 406:	41 f0       	breq	.+16     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 408:	86 30       	cpi	r24, 0x06	; 6
 40a:	89 f0       	breq	.+34     	; 0x42e <__FUSE_REGION_LENGTH__+0x2e>
 40c:	43 c0       	rjmp	.+134    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 40e:	8c 30       	cpi	r24, 0x0C	; 12
 410:	21 f1       	breq	.+72     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
 412:	8d 30       	cpi	r24, 0x0D	; 13
 414:	69 f1       	breq	.+90     	; 0x470 <__FUSE_REGION_LENGTH__+0x70>
 416:	3e c0       	rjmp	.+124    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 418:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <liftDoorState+0x1>
 41c:	0e 2e       	mov	r0, r30
 41e:	00 0c       	add	r0, r0
 420:	ff 0b       	sbc	r31, r31
 422:	ee 59       	subi	r30, 0x9E	; 158
 424:	ff 4f       	sbci	r31, 0xFF	; 255
 426:	80 81       	ld	r24, Z
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	85 bb       	out	0x15, r24	; 21
 42c:	33 c0       	rjmp	.+102    	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 42e:	e0 91 7f 00 	lds	r30, 0x007F	; 0x80007f <liftDoorState+0x3>
 432:	0e 2e       	mov	r0, r30
 434:	00 0c       	add	r0, r0
 436:	ff 0b       	sbc	r31, r31
 438:	ee 59       	subi	r30, 0x9E	; 158
 43a:	ff 4f       	sbci	r31, 0xFF	; 255
 43c:	80 81       	ld	r24, Z
 43e:	82 60       	ori	r24, 0x02	; 2
 440:	85 bb       	out	0x15, r24	; 21
 442:	28 c0       	rjmp	.+80     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 444:	e0 91 81 00 	lds	r30, 0x0081	; 0x800081 <liftDoorState+0x5>
 448:	0e 2e       	mov	r0, r30
 44a:	00 0c       	add	r0, r0
 44c:	ff 0b       	sbc	r31, r31
 44e:	ee 59       	subi	r30, 0x9E	; 158
 450:	ff 4f       	sbci	r31, 0xFF	; 255
 452:	80 81       	ld	r24, Z
 454:	84 60       	ori	r24, 0x04	; 4
 456:	85 bb       	out	0x15, r24	; 21
 458:	1d c0       	rjmp	.+58     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 45a:	e0 91 83 00 	lds	r30, 0x0083	; 0x800083 <liftDoorState+0x7>
 45e:	0e 2e       	mov	r0, r30
 460:	00 0c       	add	r0, r0
 462:	ff 0b       	sbc	r31, r31
 464:	ee 59       	subi	r30, 0x9E	; 158
 466:	ff 4f       	sbci	r31, 0xFF	; 255
 468:	80 81       	ld	r24, Z
 46a:	88 60       	ori	r24, 0x08	; 8
 46c:	85 bb       	out	0x15, r24	; 21
 46e:	12 c0       	rjmp	.+36     	; 0x494 <__FUSE_REGION_LENGTH__+0x94>
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <repetitionRate>
 476:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <doorOpeningRate>
 47a:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <doorOpeningRate+0x1>
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <doorOpeningRate+0x1>
 484:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <doorOpeningRate>
 488:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <displayCache>
 48c:	91 11       	cpse	r25, r1
 48e:	31 c0       	rjmp	.+98     	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
 490:	21 e0       	ldi	r18, 0x01	; 1
 492:	56 c0       	rjmp	.+172    	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
 494:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <repetitionRate>
 498:	8f 5f       	subi	r24, 0xFF	; 255
 49a:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <repetitionRate>
 49e:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <doorOpeningRate>
 4a2:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <doorOpeningRate+0x1>
 4a6:	2f 5f       	subi	r18, 0xFF	; 255
 4a8:	3f 4f       	sbci	r19, 0xFF	; 255
 4aa:	30 93 74 00 	sts	0x0074, r19	; 0x800074 <doorOpeningRate+0x1>
 4ae:	20 93 73 00 	sts	0x0073, r18	; 0x800073 <doorOpeningRate>
 4b2:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <displayCache>
 4b6:	99 23       	and	r25, r25
 4b8:	09 f4       	brne	.+2      	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
 4ba:	47 c0       	rjmp	.+142    	; 0x54a <__FUSE_REGION_LENGTH__+0x14a>
 4bc:	2d ec       	ldi	r18, 0xCD	; 205
 4be:	82 9f       	mul	r24, r18
 4c0:	21 2d       	mov	r18, r1
 4c2:	11 24       	eor	r1, r1
 4c4:	26 95       	lsr	r18
 4c6:	26 95       	lsr	r18
 4c8:	32 2f       	mov	r19, r18
 4ca:	33 0f       	add	r19, r19
 4cc:	33 0f       	add	r19, r19
 4ce:	23 0f       	add	r18, r19
 4d0:	82 1b       	sub	r24, r18
 4d2:	81 30       	cpi	r24, 0x01	; 1
 4d4:	71 f0       	breq	.+28     	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
 4d6:	28 f0       	brcs	.+10     	; 0x4e2 <__FUSE_REGION_LENGTH__+0xe2>
 4d8:	82 30       	cpi	r24, 0x02	; 2
 4da:	b1 f0       	breq	.+44     	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
 4dc:	83 30       	cpi	r24, 0x03	; 3
 4de:	f9 f0       	breq	.+62     	; 0x51e <__FUSE_REGION_LENGTH__+0x11e>
 4e0:	28 c0       	rjmp	.+80     	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
 4e2:	94 fd       	sbrc	r25, 4
 4e4:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <buttonLiftLed>
 4e8:	90 ff       	sbrs	r25, 0
 4ea:	23 c0       	rjmp	.+70     	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
 4ec:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <buttonFloorLed>
 4f0:	20 c0       	rjmp	.+64     	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
 4f2:	95 ff       	sbrs	r25, 5
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <buttonLiftLed>
 4fc:	91 ff       	sbrs	r25, 1
 4fe:	19 c0       	rjmp	.+50     	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <buttonFloorLed>
 506:	15 c0       	rjmp	.+42     	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
 508:	96 ff       	sbrs	r25, 6
 50a:	03 c0       	rjmp	.+6      	; 0x512 <__FUSE_REGION_LENGTH__+0x112>
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <buttonLiftLed>
 512:	92 ff       	sbrs	r25, 2
 514:	0e c0       	rjmp	.+28     	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <buttonFloorLed>
 51c:	0a c0       	rjmp	.+20     	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
 51e:	99 23       	and	r25, r25
 520:	1c f4       	brge	.+6      	; 0x528 <__FUSE_REGION_LENGTH__+0x128>
 522:	83 e0       	ldi	r24, 0x03	; 3
 524:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <buttonLiftLed>
 528:	93 ff       	sbrs	r25, 3
 52a:	03 c0       	rjmp	.+6      	; 0x532 <__FUSE_REGION_LENGTH__+0x132>
 52c:	83 e0       	ldi	r24, 0x03	; 3
 52e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <buttonFloorLed>
 532:	89 2f       	mov	r24, r25
 534:	80 7f       	andi	r24, 0xF0	; 240
 536:	19 f0       	breq	.+6      	; 0x53e <__FUSE_REGION_LENGTH__+0x13e>
 538:	20 91 85 00 	lds	r18, 0x0085	; 0x800085 <buttonLiftLed_on>
 53c:	01 c0       	rjmp	.+2      	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	9f 70       	andi	r25, 0x0F	; 15
 542:	31 f0       	breq	.+12     	; 0x550 <__FUSE_REGION_LENGTH__+0x150>
 544:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <buttonFloorLed_On>
 548:	04 c0       	rjmp	.+8      	; 0x552 <__FUSE_REGION_LENGTH__+0x152>
 54a:	21 e0       	ldi	r18, 0x01	; 1
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	01 c0       	rjmp	.+2      	; 0x552 <__FUSE_REGION_LENGTH__+0x152>
 550:	91 e0       	ldi	r25, 0x01	; 1
 552:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <liftPosDisplay_On>
 556:	81 11       	cpse	r24, r1
 558:	04 c0       	rjmp	.+8      	; 0x562 <__FUSE_REGION_LENGTH__+0x162>
 55a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <liftPosition>
 55e:	8f 73       	andi	r24, 0x3F	; 63
 560:	01 c0       	rjmp	.+2      	; 0x564 <__FUSE_REGION_LENGTH__+0x164>
 562:	8f e3       	ldi	r24, 0x3F	; 63
 564:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <liftPositionPort>
 568:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <liftDisplay7Seg_On>
 56c:	31 11       	cpse	r19, r1
 56e:	03 c0       	rjmp	.+6      	; 0x576 <__FUSE_REGION_LENGTH__+0x176>
 570:	30 91 88 00 	lds	r19, 0x0088	; 0x800088 <liftDisplay7Seg>
 574:	01 c0       	rjmp	.+2      	; 0x578 <__FUSE_REGION_LENGTH__+0x178>
 576:	37 e0       	ldi	r19, 0x07	; 7
 578:	30 93 84 00 	sts	0x0084, r19	; 0x800084 <floorDisplayPort>
 57c:	30 e8       	ldi	r19, 0x80	; 128
 57e:	23 9f       	mul	r18, r19
 580:	a0 01       	movw	r20, r0
 582:	11 24       	eor	r1, r1
 584:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <doorframe>
 588:	60 e4       	ldi	r22, 0x40	; 64
 58a:	36 9f       	mul	r19, r22
 58c:	90 01       	movw	r18, r0
 58e:	11 24       	eor	r1, r1
 590:	24 2b       	or	r18, r20
 592:	82 2b       	or	r24, r18
 594:	88 bb       	out	0x18, r24	; 24
 596:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <buttonLiftLed>
 59a:	82 2f       	mov	r24, r18
 59c:	88 0f       	add	r24, r24
 59e:	88 0f       	add	r24, r24
 5a0:	88 0f       	add	r24, r24
 5a2:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <buttonFloorLed>
 5a6:	40 e2       	ldi	r20, 0x20	; 32
 5a8:	34 9f       	mul	r19, r20
 5aa:	90 01       	movw	r18, r0
 5ac:	11 24       	eor	r1, r1
 5ae:	28 2b       	or	r18, r24
 5b0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <floorDisplayPort>
 5b4:	28 2b       	or	r18, r24
 5b6:	60 e8       	ldi	r22, 0x80	; 128
 5b8:	96 9f       	mul	r25, r22
 5ba:	c0 01       	movw	r24, r0
 5bc:	11 24       	eor	r1, r1
 5be:	82 2b       	or	r24, r18
 5c0:	8b bb       	out	0x1b, r24	; 27
 5c2:	08 95       	ret

000005c4 <ReadKeyEvent>:
 5c4:	90 b3       	in	r25, 0x10	; 16
 5c6:	98 23       	and	r25, r24
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	09 f4       	brne	.+2      	; 0x5ce <ReadKeyEvent+0xa>
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <ReadDoorState>:
 5d0:	e8 2f       	mov	r30, r24
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	ee 0f       	add	r30, r30
 5d6:	ff 1f       	adc	r31, r31
 5d8:	e4 58       	subi	r30, 0x84	; 132
 5da:	ff 4f       	sbci	r31, 0xFF	; 255
 5dc:	e1 81       	ldd	r30, Z+1	; 0x01
 5de:	0e 2e       	mov	r0, r30
 5e0:	00 0c       	add	r0, r0
 5e2:	ff 0b       	sbc	r31, r31
 5e4:	ee 59       	subi	r30, 0x9E	; 158
 5e6:	ff 4f       	sbci	r31, 0xFF	; 255
 5e8:	90 81       	ld	r25, Z
 5ea:	90 3f       	cpi	r25, 0xF0	; 240
 5ec:	29 f0       	breq	.+10     	; 0x5f8 <ReadDoorState+0x28>
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	91 11       	cpse	r25, r1
 5f2:	03 c0       	rjmp	.+6      	; 0x5fa <ReadDoorState+0x2a>
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	08 95       	ret
 5f8:	82 e0       	ldi	r24, 0x02	; 2
 5fa:	08 95       	ret

000005fc <SetDoorState>:
 5fc:	e6 2f       	mov	r30, r22
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	ee 0f       	add	r30, r30
 602:	ff 1f       	adc	r31, r31
 604:	e4 58       	subi	r30, 0x84	; 132
 606:	ff 4f       	sbci	r31, 0xFF	; 255
 608:	80 83       	st	Z, r24
 60a:	08 95       	ret

0000060c <MoveElevator>:
 60c:	61 15       	cp	r22, r1
 60e:	71 05       	cpc	r23, r1
 610:	19 f1       	breq	.+70     	; 0x658 <MoveElevator+0x4c>
 612:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <liftSpeed>
 616:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <liftSpeed+0x1>
 61a:	62 17       	cp	r22, r18
 61c:	73 07       	cpc	r23, r19
 61e:	38 f0       	brcs	.+14     	; 0x62e <MoveElevator+0x22>
 620:	2f 5f       	subi	r18, 0xFF	; 255
 622:	3f 4f       	sbci	r19, 0xFF	; 255
 624:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <liftSpeed+0x1>
 628:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <liftSpeed>
 62c:	08 95       	ret
 62e:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <liftSpeed+0x1>
 632:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <liftSpeed>
 636:	81 30       	cpi	r24, 0x01	; 1
 638:	41 f4       	brne	.+16     	; 0x64a <MoveElevator+0x3e>
 63a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <liftPosition>
 63e:	81 33       	cpi	r24, 0x31	; 49
 640:	58 f4       	brcc	.+22     	; 0x658 <MoveElevator+0x4c>
 642:	8f 5f       	subi	r24, 0xFF	; 255
 644:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <liftPosition>
 648:	08 95       	ret
 64a:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <liftPosition>
 64e:	88 23       	and	r24, r24
 650:	19 f0       	breq	.+6      	; 0x658 <MoveElevator+0x4c>
 652:	81 50       	subi	r24, 0x01	; 1
 654:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <liftPosition>
 658:	08 95       	ret

0000065a <ReadElevatorState>:
 65a:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <liftPosition>
 65e:	90 31       	cpi	r25, 0x10	; 16
 660:	49 f0       	breq	.+18     	; 0x674 <ReadElevatorState+0x1a>
 662:	18 f4       	brcc	.+6      	; 0x66a <ReadElevatorState+0x10>
 664:	99 23       	and	r25, r25
 666:	a1 f0       	breq	.+40     	; 0x690 <ReadElevatorState+0x36>
 668:	0b c0       	rjmp	.+22     	; 0x680 <ReadElevatorState+0x26>
 66a:	90 32       	cpi	r25, 0x20	; 32
 66c:	29 f0       	breq	.+10     	; 0x678 <ReadElevatorState+0x1e>
 66e:	90 33       	cpi	r25, 0x30	; 48
 670:	29 f0       	breq	.+10     	; 0x67c <ReadElevatorState+0x22>
 672:	06 c0       	rjmp	.+12     	; 0x680 <ReadElevatorState+0x26>
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	11 c0       	rjmp	.+34     	; 0x69a <ReadElevatorState+0x40>
 678:	82 e0       	ldi	r24, 0x02	; 2
 67a:	0f c0       	rjmp	.+30     	; 0x69a <ReadElevatorState+0x40>
 67c:	83 e0       	ldi	r24, 0x03	; 3
 67e:	0d c0       	rjmp	.+26     	; 0x69a <ReadElevatorState+0x40>
 680:	91 33       	cpi	r25, 0x31	; 49
 682:	40 f4       	brcc	.+16     	; 0x694 <ReadElevatorState+0x3a>
 684:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <liftPositionCache>
 688:	98 13       	cpse	r25, r24
 68a:	06 c0       	rjmp	.+12     	; 0x698 <ReadElevatorState+0x3e>
 68c:	85 e6       	ldi	r24, 0x65	; 101
 68e:	05 c0       	rjmp	.+10     	; 0x69a <ReadElevatorState+0x40>
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	03 c0       	rjmp	.+6      	; 0x69a <ReadElevatorState+0x40>
 694:	88 ec       	ldi	r24, 0xC8	; 200
 696:	01 c0       	rjmp	.+2      	; 0x69a <ReadElevatorState+0x40>
 698:	84 e6       	ldi	r24, 0x64	; 100
 69a:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <liftPositionCache>
 69e:	08 95       	ret

000006a0 <CalibrateElevatorPosition>:
 6a0:	0e 94 2d 03 	call	0x65a	; 0x65a <ReadElevatorState>
 6a4:	88 23       	and	r24, r24
 6a6:	29 f0       	breq	.+10     	; 0x6b2 <CalibrateElevatorPosition+0x12>
 6a8:	68 ee       	ldi	r22, 0xE8	; 232
 6aa:	73 e0       	ldi	r23, 0x03	; 3
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	0e 94 06 03 	call	0x60c	; 0x60c <MoveElevator>
 6b2:	08 95       	ret

000006b4 <SetDisplay>:
 6b4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <liftDisplay7Seg>
 6b8:	08 95       	ret

000006ba <SetIndicatorFloorState>:
 6ba:	84 30       	cpi	r24, 0x04	; 4
 6bc:	70 f4       	brcc	.+28     	; 0x6da <SetIndicatorFloorState+0x20>
 6be:	21 e0       	ldi	r18, 0x01	; 1
 6c0:	30 e0       	ldi	r19, 0x00	; 0
 6c2:	a9 01       	movw	r20, r18
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <SetIndicatorFloorState+0x10>
 6c6:	44 0f       	add	r20, r20
 6c8:	55 1f       	adc	r21, r21
 6ca:	8a 95       	dec	r24
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <SetIndicatorFloorState+0xc>
 6ce:	ca 01       	movw	r24, r20
 6d0:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <displayCache>
 6d4:	89 2b       	or	r24, r25
 6d6:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <displayCache>
 6da:	08 95       	ret

000006dc <SetIndicatorElevatorState>:
 6dc:	84 30       	cpi	r24, 0x04	; 4
 6de:	78 f4       	brcc	.+30     	; 0x6fe <SetIndicatorElevatorState+0x22>
 6e0:	8c 5f       	subi	r24, 0xFC	; 252
 6e2:	21 e0       	ldi	r18, 0x01	; 1
 6e4:	30 e0       	ldi	r19, 0x00	; 0
 6e6:	a9 01       	movw	r20, r18
 6e8:	02 c0       	rjmp	.+4      	; 0x6ee <SetIndicatorElevatorState+0x12>
 6ea:	44 0f       	add	r20, r20
 6ec:	55 1f       	adc	r21, r21
 6ee:	8a 95       	dec	r24
 6f0:	e2 f7       	brpl	.-8      	; 0x6ea <SetIndicatorElevatorState+0xe>
 6f2:	ca 01       	movw	r24, r20
 6f4:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <displayCache>
 6f8:	89 2b       	or	r24, r25
 6fa:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <displayCache>
 6fe:	08 95       	ret

00000700 <ClrIndicatorFloorState>:
 700:	84 30       	cpi	r24, 0x04	; 4
 702:	78 f4       	brcc	.+30     	; 0x722 <ClrIndicatorFloorState+0x22>
 704:	21 e0       	ldi	r18, 0x01	; 1
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	a9 01       	movw	r20, r18
 70a:	02 c0       	rjmp	.+4      	; 0x710 <ClrIndicatorFloorState+0x10>
 70c:	44 0f       	add	r20, r20
 70e:	55 1f       	adc	r21, r21
 710:	8a 95       	dec	r24
 712:	e2 f7       	brpl	.-8      	; 0x70c <ClrIndicatorFloorState+0xc>
 714:	ca 01       	movw	r24, r20
 716:	80 95       	com	r24
 718:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <displayCache>
 71c:	89 23       	and	r24, r25
 71e:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <displayCache>
 722:	08 95       	ret

00000724 <ClrIndicatorElevatorState>:
 724:	84 30       	cpi	r24, 0x04	; 4
 726:	78 f4       	brcc	.+30     	; 0x746 <ClrIndicatorElevatorState+0x22>
 728:	24 e0       	ldi	r18, 0x04	; 4
 72a:	28 0f       	add	r18, r24
 72c:	81 e0       	ldi	r24, 0x01	; 1
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <ClrIndicatorElevatorState+0x12>
 732:	88 0f       	add	r24, r24
 734:	99 1f       	adc	r25, r25
 736:	2a 95       	dec	r18
 738:	e2 f7       	brpl	.-8      	; 0x732 <ClrIndicatorElevatorState+0xe>
 73a:	80 95       	com	r24
 73c:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <displayCache>
 740:	89 23       	and	r24, r25
 742:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <displayCache>
 746:	08 95       	ret

00000748 <__umulhisi3>:
 748:	a2 9f       	mul	r26, r18
 74a:	b0 01       	movw	r22, r0
 74c:	b3 9f       	mul	r27, r19
 74e:	c0 01       	movw	r24, r0
 750:	a3 9f       	mul	r26, r19
 752:	70 0d       	add	r23, r0
 754:	81 1d       	adc	r24, r1
 756:	11 24       	eor	r1, r1
 758:	91 1d       	adc	r25, r1
 75a:	b2 9f       	mul	r27, r18
 75c:	70 0d       	add	r23, r0
 75e:	81 1d       	adc	r24, r1
 760:	11 24       	eor	r1, r1
 762:	91 1d       	adc	r25, r1
 764:	08 95       	ret

00000766 <_exit>:
 766:	f8 94       	cli

00000768 <__stop_program>:
 768:	ff cf       	rjmp	.-2      	; 0x768 <__stop_program>
