
Liftsumulator_Basic_V1_AufgabeA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000650  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000650  000006e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800068  00800068  000006ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000071c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000758  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c2e  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000034d  00000000  00000000  00001456  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000805  00000000  00000000  000017a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e9  00000000  00000000  00002124  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ff  00000000  00000000  0000280d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8a:	0c 94 26 03 	jmp	0x64c	; 0x64c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ConvertButtonTypeToLiftPosType>:
// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
  LiftPosType retVal = None;

  switch (button)
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	c9 f0       	breq	.+50     	; 0xc8 <ConvertButtonTypeToLiftPosType+0x36>
  96:	38 f4       	brcc	.+14     	; 0xa6 <ConvertButtonTypeToLiftPosType+0x14>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	91 f0       	breq	.+36     	; 0xc0 <ConvertButtonTypeToLiftPosType+0x2e>
  9c:	84 30       	cpi	r24, 0x04	; 4
  9e:	91 f0       	breq	.+36     	; 0xc4 <ConvertButtonTypeToLiftPosType+0x32>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	a1 f4       	brne	.+40     	; 0xcc <ConvertButtonTypeToLiftPosType+0x3a>
  a4:	0b c0       	rjmp	.+22     	; 0xbc <ConvertButtonTypeToLiftPosType+0x2a>
  a6:	80 32       	cpi	r24, 0x20	; 32
  a8:	59 f0       	breq	.+22     	; 0xc0 <ConvertButtonTypeToLiftPosType+0x2e>
  aa:	18 f4       	brcc	.+6      	; 0xb2 <ConvertButtonTypeToLiftPosType+0x20>
  ac:	80 31       	cpi	r24, 0x10	; 16
  ae:	31 f0       	breq	.+12     	; 0xbc <ConvertButtonTypeToLiftPosType+0x2a>
  b0:	0d c0       	rjmp	.+26     	; 0xcc <ConvertButtonTypeToLiftPosType+0x3a>
  b2:	80 34       	cpi	r24, 0x40	; 64
  b4:	39 f0       	breq	.+14     	; 0xc4 <ConvertButtonTypeToLiftPosType+0x32>
  b6:	80 38       	cpi	r24, 0x80	; 128
  b8:	39 f0       	breq	.+14     	; 0xc8 <ConvertButtonTypeToLiftPosType+0x36>
  ba:	08 c0       	rjmp	.+16     	; 0xcc <ConvertButtonTypeToLiftPosType+0x3a>
  {
    case LiftButton_F0:
    case FloorButton_F0:
    {
      retVal = Floor0;
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret
      break;
    }
    case LiftButton_F1:
    case FloorButton_F1:
    {
      retVal = Floor1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
      break;
  c2:	08 95       	ret
    }
    case LiftButton_F2:
    case FloorButton_F2:
    {
      retVal = Floor2;
  c4:	82 e0       	ldi	r24, 0x02	; 2
      break;
  c6:	08 95       	ret
    }
    case LiftButton_F3:
    case FloorButton_F3:
    {
      retVal = Floor3;
  c8:	83 e0       	ldi	r24, 0x03	; 3
      break;
  ca:	08 95       	ret
***  PRIVATE FUNCTIONs *********************************************************
*******************************************************************************/
// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
  LiftPosType retVal = None;
  cc:	87 e0       	ldi	r24, 0x07	; 7
      break;
    }
  }

  return retVal;
}
  ce:	08 95       	ret

000000d0 <CheckKeyEvent>:

// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
  d0:	cf 93       	push	r28
  ButtonType retVal = EmergencyButton;

  for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
  d2:	c0 e8       	ldi	r28, 0x80	; 128
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <CheckKeyEvent+0x8>
  d6:	c8 2f       	mov	r28, r24
  {
    if (ReadKeyEvent(key) == Pressed)
  d8:	8c 2f       	mov	r24, r28
  da:	0e 94 55 02 	call	0x4aa	; 0x4aa <ReadKeyEvent>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	31 f4       	brne	.+12     	; 0xee <CheckKeyEvent+0x1e>
// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
  ButtonType retVal = EmergencyButton;

  for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
  e2:	8c 2f       	mov	r24, r28
  e4:	86 95       	lsr	r24
  e6:	29 f0       	breq	.+10     	; 0xf2 <CheckKeyEvent+0x22>
  e8:	cc 23       	and	r28, r28
  ea:	a9 f3       	breq	.-22     	; 0xd6 <CheckKeyEvent+0x6>
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <CheckKeyEvent+0x22>
  ee:	c6 95       	lsr	r28
  f0:	99 f7       	brne	.-26     	; 0xd8 <CheckKeyEvent+0x8>
    {
      retVal = key;
    }
  }
  return retVal;
}
  f2:	8c 2f       	mov	r24, r28
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <UpdateDisplay>:

// Update the 7-Seg. display
void UpdateDisplay (LiftPosType elevatorState)
{
  switch (elevatorState)
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	10 f0       	brcs	.+4      	; 0x100 <UpdateDisplay+0x8>
  fc:	86 30       	cpi	r24, 0x06	; 6
  fe:	11 f4       	brne	.+4      	; 0x104 <UpdateDisplay+0xc>
    case Floor2:
    case Floor3:
    case Error:
    case Test:
    {
      SetDisplay(elevatorState);
 100:	0e 94 cd 02 	call	0x59a	; 0x59a <SetDisplay>
 104:	08 95       	ret

00000106 <main>:
/*******************************************************************************
*** MAIN PROGRAM
*******************************************************************************/
int main(void)
{
  InitializePorts();  // Initialization of ports
 106:	0e 94 28 01 	call	0x250	; 0x250 <InitializePorts>
  InitializeStart();  // Set start state of the system
 10a:	0e 94 2e 01 	call	0x25c	; 0x25c <InitializeStart>
		{
			MoveElevator(elevatorDirection, Fast);
		}
		else
		{
			state = OpenDoor;
 10e:	d4 e0       	ldi	r29, 0x04	; 4
      {
        // Open the door and wait still the door is open completely
		SetDoorState(Open, currentElevatorState);
		if (ReadDoorState(currentElevatorState) == Open)
		{
			state = Waiting;
 110:	01 e0       	ldi	r16, 0x01	; 1
		{
			SetDoorState(Closed, currentElevatorState);
		}
		else
		{
			state = MoveLift;
 112:	13 e0       	ldi	r17, 0x03	; 3

  // Endless loop
  while(1)
  {
	// do always
	UpdateDisplay(currentElevatorState);  // Update the 7-Seg. display (lift)
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	0e 94 7c 00 	call	0xf8	; 0xf8 <UpdateDisplay>
	currentElevatorState = ReadElevatorState();
 11c:	0e 94 a0 02 	call	0x540	; 0x540 <ReadElevatorState>
 120:	80 93 60 00 	sts	0x0060, r24
	SetOutput();               // Send the calculated output values to the ports
 124:	0e 94 46 01 	call	0x28c	; 0x28c <SetOutput>

    // Handling state machine
    switch (state)
 128:	80 91 69 00 	lds	r24, 0x0069
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	d9 f1       	breq	.+118    	; 0x1a6 <main+0xa0>
 130:	28 f4       	brcc	.+10     	; 0x13c <main+0x36>
 132:	88 23       	and	r24, r24
 134:	51 f0       	breq	.+20     	; 0x14a <main+0x44>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	b1 f0       	breq	.+44     	; 0x166 <main+0x60>
 13a:	ec cf       	rjmp	.-40     	; 0x114 <main+0xe>
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	09 f4       	brne	.+2      	; 0x142 <main+0x3c>
 140:	41 c0       	rjmp	.+130    	; 0x1c4 <main+0xbe>
 142:	84 30       	cpi	r24, 0x04	; 4
 144:	09 f4       	brne	.+2      	; 0x148 <main+0x42>
 146:	4e c0       	rjmp	.+156    	; 0x1e4 <main+0xde>
 148:	e5 cf       	rjmp	.-54     	; 0x114 <main+0xe>
    {
      case Uninitialized:
      {
        // Lift position calibration to ground floor (Floor0)
		if (ReadElevatorState() != Floor0)
 14a:	0e 94 a0 02 	call	0x540	; 0x540 <ReadElevatorState>
 14e:	88 23       	and	r24, r24
 150:	19 f0       	breq	.+6      	; 0x158 <main+0x52>
		{
			CalibrateElevatorPosition();
 152:	0e 94 c3 02 	call	0x586	; 0x586 <CalibrateElevatorPosition>
 156:	de cf       	rjmp	.-68     	; 0x114 <main+0xe>
		}
		else
		{
			state = OpenDoor;
 158:	d0 93 69 00 	sts	0x0069, r29
			currentElevatorState = ReadElevatorState();
 15c:	0e 94 a0 02 	call	0x540	; 0x540 <ReadElevatorState>
 160:	80 93 60 00 	sts	0x0060, r24
 164:	d7 cf       	rjmp	.-82     	; 0x114 <main+0xe>


      case Waiting:
      {
		ButtonType key;
		key = CheckKeyEvent();
 166:	0e 94 68 00 	call	0xd0	; 0xd0 <CheckKeyEvent>
 16a:	c8 2f       	mov	r28, r24
        // Waiting for new floor request
		if (EmergencyButton != key)
 16c:	88 23       	and	r24, r24
 16e:	91 f2       	breq	.-92     	; 0x114 <main+0xe>
		{
			// button was pressed
			requestedElevatorPosition = ConvertButtonTypeToLiftPosType(key);
 170:	0e 94 49 00 	call	0x92	; 0x92 <ConvertButtonTypeToLiftPosType>
 174:	80 93 61 00 	sts	0x0061, r24
			int result = currentElevatorState - requestedElevatorPosition;
 178:	20 91 60 00 	lds	r18, 0x0060
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	28 1b       	sub	r18, r24
 180:	31 09       	sbc	r19, r1
			if (result != 0)
 182:	41 f2       	breq	.-112    	; 0x114 <main+0xe>
			{
				elevatorDirection = result < 0 ? Up : Down;
 184:	93 2f       	mov	r25, r19
 186:	99 1f       	adc	r25, r25
 188:	99 27       	eor	r25, r25
 18a:	99 1f       	adc	r25, r25
 18c:	90 93 68 00 	sts	0x0068, r25
				if (key < 16)
 190:	c0 31       	cpi	r28, 0x10	; 16
 192:	18 f4       	brcc	.+6      	; 0x19a <main+0x94>
				{
					SetIndicatorElevatorState(requestedElevatorPosition);
 194:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <SetIndicatorElevatorState>
 198:	02 c0       	rjmp	.+4      	; 0x19e <main+0x98>
				}
				else
				{
					SetIndicatorFloorState(requestedElevatorPosition);
 19a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <SetIndicatorFloorState>
				}				
				state = CloseDoor;
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	80 93 69 00 	sts	0x0069, r24
 1a4:	b7 cf       	rjmp	.-146    	; 0x114 <main+0xe>


      case CloseDoor:
      {
        // Close the door and wait until the door is closed
		if (ReadDoorState(currentElevatorState) != Closed)
 1a6:	80 91 60 00 	lds	r24, 0x0060
 1aa:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ReadDoorState>
 1ae:	88 23       	and	r24, r24
 1b0:	31 f0       	breq	.+12     	; 0x1be <main+0xb8>
		{
			SetDoorState(Closed, currentElevatorState);
 1b2:	60 91 60 00 	lds	r22, 0x0060
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SetDoorState>
 1bc:	ab cf       	rjmp	.-170    	; 0x114 <main+0xe>
		}
		else
		{
			state = MoveLift;
 1be:	10 93 69 00 	sts	0x0069, r17
 1c2:	a8 cf       	rjmp	.-176    	; 0x114 <main+0xe>


      case MoveLift:
      {
        // Move cabin to the requested floor
		if (currentElevatorState != requestedElevatorPosition)
 1c4:	90 91 60 00 	lds	r25, 0x0060
 1c8:	80 91 61 00 	lds	r24, 0x0061
 1cc:	98 17       	cp	r25, r24
 1ce:	39 f0       	breq	.+14     	; 0x1de <main+0xd8>
		{
			MoveElevator(elevatorDirection, Fast);
 1d0:	68 ee       	ldi	r22, 0xE8	; 232
 1d2:	73 e0       	ldi	r23, 0x03	; 3
 1d4:	80 91 68 00 	lds	r24, 0x0068
 1d8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <MoveElevator>
 1dc:	9b cf       	rjmp	.-202    	; 0x114 <main+0xe>
		}
		else
		{
			state = OpenDoor;
 1de:	d0 93 69 00 	sts	0x0069, r29
 1e2:	98 cf       	rjmp	.-208    	; 0x114 <main+0xe>


      case OpenDoor:
      {
        // Open the door and wait still the door is open completely
		SetDoorState(Open, currentElevatorState);
 1e4:	60 91 60 00 	lds	r22, 0x0060
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SetDoorState>
		if (ReadDoorState(currentElevatorState) == Open)
 1ee:	80 91 60 00 	lds	r24, 0x0060
 1f2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <ReadDoorState>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	09 f0       	breq	.+2      	; 0x1fc <main+0xf6>
 1fa:	8c cf       	rjmp	.-232    	; 0x114 <main+0xe>
		{
			state = Waiting;
 1fc:	00 93 69 00 	sts	0x0069, r16
			ClrIndicatorFloorState(currentElevatorState);
 200:	80 91 60 00 	lds	r24, 0x0060
 204:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <ClrIndicatorFloorState>
			ClrIndicatorElevatorState(currentElevatorState);
 208:	80 91 60 00 	lds	r24, 0x0060
 20c:	0e 94 05 03 	call	0x60a	; 0x60a <ClrIndicatorElevatorState>
 210:	81 cf       	rjmp	.-254    	; 0x114 <main+0xe>

00000212 <MakeDoorStates>:
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
 216:	e6 e7       	ldi	r30, 0x76	; 118
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	2e e7       	ldi	r18, 0x7E	; 126
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	df 01       	movw	r26, r30
 220:	11 97       	sbiw	r26, 0x01	; 1
 222:	8c 91       	ld	r24, X
 224:	81 11       	cpse	r24, r1
 226:	06 c0       	rjmp	.+12     	; 0x234 <MakeDoorStates+0x22>
 228:	80 81       	ld	r24, Z
 22a:	18 16       	cp	r1, r24
 22c:	54 f4       	brge	.+20     	; 0x242 <MakeDoorStates+0x30>
 22e:	81 50       	subi	r24, 0x01	; 1
 230:	80 83       	st	Z, r24
 232:	07 c0       	rjmp	.+14     	; 0x242 <MakeDoorStates+0x30>
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	29 f4       	brne	.+10     	; 0x242 <MakeDoorStates+0x30>
 238:	80 81       	ld	r24, Z
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	14 f4       	brge	.+4      	; 0x242 <MakeDoorStates+0x30>
 23e:	8f 5f       	subi	r24, 0xFF	; 255
 240:	80 83       	st	Z, r24
 242:	32 96       	adiw	r30, 0x02	; 2
 244:	e2 17       	cp	r30, r18
 246:	f3 07       	cpc	r31, r19
 248:	51 f7       	brne	.-44     	; 0x21e <MakeDoorStates+0xc>
 24a:	df 91       	pop	r29
 24c:	cf 91       	pop	r28
 24e:	08 95       	ret

00000250 <InitializePorts>:
 250:	8f ef       	ldi	r24, 0xFF	; 255
 252:	87 bb       	out	0x17, r24	; 23
 254:	84 bb       	out	0x14, r24	; 20
 256:	8a bb       	out	0x1a, r24	; 26
 258:	11 ba       	out	0x11, r1	; 17
 25a:	08 95       	ret

0000025c <InitializeStart>:
 25c:	10 92 74 00 	sts	0x0074, r1
 260:	10 92 7e 00 	sts	0x007E, r1
 264:	10 92 83 00 	sts	0x0083, r1
 268:	10 92 82 00 	sts	0x0082, r1
 26c:	10 92 72 00 	sts	0x0072, r1
 270:	e5 e7       	ldi	r30, 0x75	; 117
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	11 82       	std	Z+1, r1	; 0x01
 276:	10 82       	st	Z, r1
 278:	13 82       	std	Z+3, r1	; 0x03
 27a:	12 82       	std	Z+2, r1	; 0x02
 27c:	15 82       	std	Z+5, r1	; 0x05
 27e:	14 82       	std	Z+4, r1	; 0x04
 280:	17 82       	std	Z+7, r1	; 0x07
 282:	16 82       	std	Z+6, r1	; 0x06
 284:	8f e1       	ldi	r24, 0x1F	; 31
 286:	80 93 71 00 	sts	0x0071, r24
 28a:	08 95       	ret

0000028c <SetOutput>:
 28c:	40 91 6c 00 	lds	r20, 0x006C
 290:	50 91 6d 00 	lds	r21, 0x006D
 294:	9a 01       	movw	r18, r20
 296:	36 95       	lsr	r19
 298:	27 95       	ror	r18
 29a:	36 95       	lsr	r19
 29c:	27 95       	ror	r18
 29e:	36 95       	lsr	r19
 2a0:	27 95       	ror	r18
 2a2:	a7 e3       	ldi	r26, 0x37	; 55
 2a4:	ba e1       	ldi	r27, 0x1A	; 26
 2a6:	0e 94 17 03 	call	0x62e	; 0x62e <__umulhisi3>
 2aa:	00 24       	eor	r0, r0
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	00 1c       	adc	r0, r0
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	00 1c       	adc	r0, r0
 2b8:	89 2f       	mov	r24, r25
 2ba:	90 2d       	mov	r25, r0
 2bc:	68 e8       	ldi	r22, 0x88	; 136
 2be:	73 e1       	ldi	r23, 0x13	; 19
 2c0:	86 9f       	mul	r24, r22
 2c2:	90 01       	movw	r18, r0
 2c4:	87 9f       	mul	r24, r23
 2c6:	30 0d       	add	r19, r0
 2c8:	96 9f       	mul	r25, r22
 2ca:	30 0d       	add	r19, r0
 2cc:	11 24       	eor	r1, r1
 2ce:	42 17       	cp	r20, r18
 2d0:	53 07       	cpc	r21, r19
 2d2:	31 f4       	brne	.+12     	; 0x2e0 <SetOutput+0x54>
 2d4:	0e 94 09 01 	call	0x212	; 0x212 <MakeDoorStates>
 2d8:	10 92 6d 00 	sts	0x006D, r1
 2dc:	10 92 6c 00 	sts	0x006C, r1
 2e0:	80 91 6e 00 	lds	r24, 0x006E
 2e4:	89 30       	cpi	r24, 0x09	; 9
 2e6:	09 f1       	breq	.+66     	; 0x32a <SetOutput+0x9e>
 2e8:	28 f4       	brcc	.+10     	; 0x2f4 <SetOutput+0x68>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	41 f0       	breq	.+16     	; 0x2fe <SetOutput+0x72>
 2ee:	86 30       	cpi	r24, 0x06	; 6
 2f0:	89 f0       	breq	.+34     	; 0x314 <SetOutput+0x88>
 2f2:	43 c0       	rjmp	.+134    	; 0x37a <SetOutput+0xee>
 2f4:	8c 30       	cpi	r24, 0x0C	; 12
 2f6:	21 f1       	breq	.+72     	; 0x340 <SetOutput+0xb4>
 2f8:	8d 30       	cpi	r24, 0x0D	; 13
 2fa:	69 f1       	breq	.+90     	; 0x356 <SetOutput+0xca>
 2fc:	3e c0       	rjmp	.+124    	; 0x37a <SetOutput+0xee>
 2fe:	e0 91 76 00 	lds	r30, 0x0076
 302:	0e 2e       	mov	r0, r30
 304:	00 0c       	add	r0, r0
 306:	ff 0b       	sbc	r31, r31
 308:	ee 59       	subi	r30, 0x9E	; 158
 30a:	ff 4f       	sbci	r31, 0xFF	; 255
 30c:	80 81       	ld	r24, Z
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	85 bb       	out	0x15, r24	; 21
 312:	33 c0       	rjmp	.+102    	; 0x37a <SetOutput+0xee>
 314:	e0 91 78 00 	lds	r30, 0x0078
 318:	0e 2e       	mov	r0, r30
 31a:	00 0c       	add	r0, r0
 31c:	ff 0b       	sbc	r31, r31
 31e:	ee 59       	subi	r30, 0x9E	; 158
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	80 81       	ld	r24, Z
 324:	82 60       	ori	r24, 0x02	; 2
 326:	85 bb       	out	0x15, r24	; 21
 328:	28 c0       	rjmp	.+80     	; 0x37a <SetOutput+0xee>
 32a:	e0 91 7a 00 	lds	r30, 0x007A
 32e:	0e 2e       	mov	r0, r30
 330:	00 0c       	add	r0, r0
 332:	ff 0b       	sbc	r31, r31
 334:	ee 59       	subi	r30, 0x9E	; 158
 336:	ff 4f       	sbci	r31, 0xFF	; 255
 338:	80 81       	ld	r24, Z
 33a:	84 60       	ori	r24, 0x04	; 4
 33c:	85 bb       	out	0x15, r24	; 21
 33e:	1d c0       	rjmp	.+58     	; 0x37a <SetOutput+0xee>
 340:	e0 91 7c 00 	lds	r30, 0x007C
 344:	0e 2e       	mov	r0, r30
 346:	00 0c       	add	r0, r0
 348:	ff 0b       	sbc	r31, r31
 34a:	ee 59       	subi	r30, 0x9E	; 158
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	80 81       	ld	r24, Z
 350:	88 60       	ori	r24, 0x08	; 8
 352:	85 bb       	out	0x15, r24	; 21
 354:	12 c0       	rjmp	.+36     	; 0x37a <SetOutput+0xee>
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	80 93 6e 00 	sts	0x006E, r24
 35c:	80 91 6c 00 	lds	r24, 0x006C
 360:	90 91 6d 00 	lds	r25, 0x006D
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	90 93 6d 00 	sts	0x006D, r25
 36a:	80 93 6c 00 	sts	0x006C, r24
 36e:	90 91 6f 00 	lds	r25, 0x006F
 372:	91 11       	cpse	r25, r1
 374:	31 c0       	rjmp	.+98     	; 0x3d8 <SetOutput+0x14c>
 376:	21 e0       	ldi	r18, 0x01	; 1
 378:	56 c0       	rjmp	.+172    	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 37a:	80 91 6e 00 	lds	r24, 0x006E
 37e:	8f 5f       	subi	r24, 0xFF	; 255
 380:	80 93 6e 00 	sts	0x006E, r24
 384:	20 91 6c 00 	lds	r18, 0x006C
 388:	30 91 6d 00 	lds	r19, 0x006D
 38c:	2f 5f       	subi	r18, 0xFF	; 255
 38e:	3f 4f       	sbci	r19, 0xFF	; 255
 390:	30 93 6d 00 	sts	0x006D, r19
 394:	20 93 6c 00 	sts	0x006C, r18
 398:	90 91 6f 00 	lds	r25, 0x006F
 39c:	99 23       	and	r25, r25
 39e:	09 f4       	brne	.+2      	; 0x3a2 <SetOutput+0x116>
 3a0:	47 c0       	rjmp	.+142    	; 0x430 <__FUSE_REGION_LENGTH__+0x30>
 3a2:	2d ec       	ldi	r18, 0xCD	; 205
 3a4:	82 9f       	mul	r24, r18
 3a6:	21 2d       	mov	r18, r1
 3a8:	11 24       	eor	r1, r1
 3aa:	26 95       	lsr	r18
 3ac:	26 95       	lsr	r18
 3ae:	32 2f       	mov	r19, r18
 3b0:	33 0f       	add	r19, r19
 3b2:	33 0f       	add	r19, r19
 3b4:	23 0f       	add	r18, r19
 3b6:	82 1b       	sub	r24, r18
 3b8:	81 30       	cpi	r24, 0x01	; 1
 3ba:	71 f0       	breq	.+28     	; 0x3d8 <SetOutput+0x14c>
 3bc:	28 f0       	brcs	.+10     	; 0x3c8 <SetOutput+0x13c>
 3be:	82 30       	cpi	r24, 0x02	; 2
 3c0:	b1 f0       	breq	.+44     	; 0x3ee <SetOutput+0x162>
 3c2:	83 30       	cpi	r24, 0x03	; 3
 3c4:	f9 f0       	breq	.+62     	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 3c6:	28 c0       	rjmp	.+80     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3c8:	94 fd       	sbrc	r25, 4
 3ca:	10 92 70 00 	sts	0x0070, r1
 3ce:	90 ff       	sbrs	r25, 0
 3d0:	23 c0       	rjmp	.+70     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3d2:	10 92 73 00 	sts	0x0073, r1
 3d6:	20 c0       	rjmp	.+64     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3d8:	95 ff       	sbrs	r25, 5
 3da:	03 c0       	rjmp	.+6      	; 0x3e2 <SetOutput+0x156>
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	80 93 70 00 	sts	0x0070, r24
 3e2:	91 ff       	sbrs	r25, 1
 3e4:	19 c0       	rjmp	.+50     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 73 00 	sts	0x0073, r24
 3ec:	15 c0       	rjmp	.+42     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3ee:	96 ff       	sbrs	r25, 6
 3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <SetOutput+0x16c>
 3f2:	82 e0       	ldi	r24, 0x02	; 2
 3f4:	80 93 70 00 	sts	0x0070, r24
 3f8:	92 ff       	sbrs	r25, 2
 3fa:	0e c0       	rjmp	.+28     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3fc:	82 e0       	ldi	r24, 0x02	; 2
 3fe:	80 93 73 00 	sts	0x0073, r24
 402:	0a c0       	rjmp	.+20     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 404:	99 23       	and	r25, r25
 406:	1c f4       	brge	.+6      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	80 93 70 00 	sts	0x0070, r24
 40e:	93 ff       	sbrs	r25, 3
 410:	03 c0       	rjmp	.+6      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 412:	83 e0       	ldi	r24, 0x03	; 3
 414:	80 93 73 00 	sts	0x0073, r24
 418:	89 2f       	mov	r24, r25
 41a:	80 7f       	andi	r24, 0xF0	; 240
 41c:	19 f0       	breq	.+6      	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 41e:	20 91 7e 00 	lds	r18, 0x007E
 422:	01 c0       	rjmp	.+2      	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	9f 70       	andi	r25, 0x0F	; 15
 428:	31 f0       	breq	.+12     	; 0x436 <__FUSE_REGION_LENGTH__+0x36>
 42a:	90 91 82 00 	lds	r25, 0x0082
 42e:	04 c0       	rjmp	.+8      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 430:	21 e0       	ldi	r18, 0x01	; 1
 432:	91 e0       	ldi	r25, 0x01	; 1
 434:	01 c0       	rjmp	.+2      	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
 436:	91 e0       	ldi	r25, 0x01	; 1
 438:	80 91 74 00 	lds	r24, 0x0074
 43c:	81 11       	cpse	r24, r1
 43e:	04 c0       	rjmp	.+8      	; 0x448 <__FUSE_REGION_LENGTH__+0x48>
 440:	80 91 71 00 	lds	r24, 0x0071
 444:	8f 73       	andi	r24, 0x3F	; 63
 446:	01 c0       	rjmp	.+2      	; 0x44a <__FUSE_REGION_LENGTH__+0x4a>
 448:	8f e3       	ldi	r24, 0x3F	; 63
 44a:	80 93 80 00 	sts	0x0080, r24
 44e:	30 91 83 00 	lds	r19, 0x0083
 452:	31 11       	cpse	r19, r1
 454:	03 c0       	rjmp	.+6      	; 0x45c <__FUSE_REGION_LENGTH__+0x5c>
 456:	30 91 81 00 	lds	r19, 0x0081
 45a:	01 c0       	rjmp	.+2      	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 45c:	37 e0       	ldi	r19, 0x07	; 7
 45e:	30 93 7d 00 	sts	0x007D, r19
 462:	30 e8       	ldi	r19, 0x80	; 128
 464:	23 9f       	mul	r18, r19
 466:	a0 01       	movw	r20, r0
 468:	11 24       	eor	r1, r1
 46a:	30 91 72 00 	lds	r19, 0x0072
 46e:	60 e4       	ldi	r22, 0x40	; 64
 470:	36 9f       	mul	r19, r22
 472:	90 01       	movw	r18, r0
 474:	11 24       	eor	r1, r1
 476:	24 2b       	or	r18, r20
 478:	82 2b       	or	r24, r18
 47a:	88 bb       	out	0x18, r24	; 24
 47c:	20 91 70 00 	lds	r18, 0x0070
 480:	82 2f       	mov	r24, r18
 482:	88 0f       	add	r24, r24
 484:	88 0f       	add	r24, r24
 486:	88 0f       	add	r24, r24
 488:	30 91 73 00 	lds	r19, 0x0073
 48c:	40 e2       	ldi	r20, 0x20	; 32
 48e:	34 9f       	mul	r19, r20
 490:	90 01       	movw	r18, r0
 492:	11 24       	eor	r1, r1
 494:	28 2b       	or	r18, r24
 496:	80 91 7d 00 	lds	r24, 0x007D
 49a:	28 2b       	or	r18, r24
 49c:	60 e8       	ldi	r22, 0x80	; 128
 49e:	96 9f       	mul	r25, r22
 4a0:	c0 01       	movw	r24, r0
 4a2:	11 24       	eor	r1, r1
 4a4:	82 2b       	or	r24, r18
 4a6:	8b bb       	out	0x1b, r24	; 27
 4a8:	08 95       	ret

000004aa <ReadKeyEvent>:
 4aa:	90 b3       	in	r25, 0x10	; 16
 4ac:	98 23       	and	r25, r24
 4ae:	81 e0       	ldi	r24, 0x01	; 1
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <ReadKeyEvent+0xa>
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	08 95       	ret

000004b6 <ReadDoorState>:
 4b6:	e8 2f       	mov	r30, r24
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	ee 0f       	add	r30, r30
 4bc:	ff 1f       	adc	r31, r31
 4be:	eb 58       	subi	r30, 0x8B	; 139
 4c0:	ff 4f       	sbci	r31, 0xFF	; 255
 4c2:	e1 81       	ldd	r30, Z+1	; 0x01
 4c4:	0e 2e       	mov	r0, r30
 4c6:	00 0c       	add	r0, r0
 4c8:	ff 0b       	sbc	r31, r31
 4ca:	ee 59       	subi	r30, 0x9E	; 158
 4cc:	ff 4f       	sbci	r31, 0xFF	; 255
 4ce:	90 81       	ld	r25, Z
 4d0:	90 3f       	cpi	r25, 0xF0	; 240
 4d2:	29 f0       	breq	.+10     	; 0x4de <ReadDoorState+0x28>
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	91 11       	cpse	r25, r1
 4d8:	03 c0       	rjmp	.+6      	; 0x4e0 <ReadDoorState+0x2a>
 4da:	80 e0       	ldi	r24, 0x00	; 0
 4dc:	08 95       	ret
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	08 95       	ret

000004e2 <SetDoorState>:
 4e2:	e6 2f       	mov	r30, r22
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	ee 0f       	add	r30, r30
 4e8:	ff 1f       	adc	r31, r31
 4ea:	eb 58       	subi	r30, 0x8B	; 139
 4ec:	ff 4f       	sbci	r31, 0xFF	; 255
 4ee:	80 83       	st	Z, r24
 4f0:	08 95       	ret

000004f2 <MoveElevator>:
 4f2:	61 15       	cp	r22, r1
 4f4:	71 05       	cpc	r23, r1
 4f6:	19 f1       	breq	.+70     	; 0x53e <MoveElevator+0x4c>
 4f8:	20 91 6a 00 	lds	r18, 0x006A
 4fc:	30 91 6b 00 	lds	r19, 0x006B
 500:	62 17       	cp	r22, r18
 502:	73 07       	cpc	r23, r19
 504:	38 f0       	brcs	.+14     	; 0x514 <MoveElevator+0x22>
 506:	2f 5f       	subi	r18, 0xFF	; 255
 508:	3f 4f       	sbci	r19, 0xFF	; 255
 50a:	30 93 6b 00 	sts	0x006B, r19
 50e:	20 93 6a 00 	sts	0x006A, r18
 512:	08 95       	ret
 514:	10 92 6b 00 	sts	0x006B, r1
 518:	10 92 6a 00 	sts	0x006A, r1
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	41 f4       	brne	.+16     	; 0x530 <MoveElevator+0x3e>
 520:	80 91 71 00 	lds	r24, 0x0071
 524:	81 33       	cpi	r24, 0x31	; 49
 526:	58 f4       	brcc	.+22     	; 0x53e <MoveElevator+0x4c>
 528:	8f 5f       	subi	r24, 0xFF	; 255
 52a:	80 93 71 00 	sts	0x0071, r24
 52e:	08 95       	ret
 530:	80 91 71 00 	lds	r24, 0x0071
 534:	88 23       	and	r24, r24
 536:	19 f0       	breq	.+6      	; 0x53e <MoveElevator+0x4c>
 538:	81 50       	subi	r24, 0x01	; 1
 53a:	80 93 71 00 	sts	0x0071, r24
 53e:	08 95       	ret

00000540 <ReadElevatorState>:
 540:	90 91 71 00 	lds	r25, 0x0071
 544:	90 31       	cpi	r25, 0x10	; 16
 546:	49 f0       	breq	.+18     	; 0x55a <ReadElevatorState+0x1a>
 548:	18 f4       	brcc	.+6      	; 0x550 <ReadElevatorState+0x10>
 54a:	99 23       	and	r25, r25
 54c:	a1 f0       	breq	.+40     	; 0x576 <ReadElevatorState+0x36>
 54e:	0b c0       	rjmp	.+22     	; 0x566 <ReadElevatorState+0x26>
 550:	90 32       	cpi	r25, 0x20	; 32
 552:	29 f0       	breq	.+10     	; 0x55e <ReadElevatorState+0x1e>
 554:	90 33       	cpi	r25, 0x30	; 48
 556:	29 f0       	breq	.+10     	; 0x562 <ReadElevatorState+0x22>
 558:	06 c0       	rjmp	.+12     	; 0x566 <ReadElevatorState+0x26>
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	11 c0       	rjmp	.+34     	; 0x580 <ReadElevatorState+0x40>
 55e:	82 e0       	ldi	r24, 0x02	; 2
 560:	0f c0       	rjmp	.+30     	; 0x580 <ReadElevatorState+0x40>
 562:	83 e0       	ldi	r24, 0x03	; 3
 564:	0d c0       	rjmp	.+26     	; 0x580 <ReadElevatorState+0x40>
 566:	91 33       	cpi	r25, 0x31	; 49
 568:	40 f4       	brcc	.+16     	; 0x57a <ReadElevatorState+0x3a>
 56a:	80 91 7f 00 	lds	r24, 0x007F
 56e:	98 13       	cpse	r25, r24
 570:	06 c0       	rjmp	.+12     	; 0x57e <ReadElevatorState+0x3e>
 572:	85 e6       	ldi	r24, 0x65	; 101
 574:	05 c0       	rjmp	.+10     	; 0x580 <ReadElevatorState+0x40>
 576:	80 e0       	ldi	r24, 0x00	; 0
 578:	03 c0       	rjmp	.+6      	; 0x580 <ReadElevatorState+0x40>
 57a:	88 ec       	ldi	r24, 0xC8	; 200
 57c:	01 c0       	rjmp	.+2      	; 0x580 <ReadElevatorState+0x40>
 57e:	84 e6       	ldi	r24, 0x64	; 100
 580:	90 93 7f 00 	sts	0x007F, r25
 584:	08 95       	ret

00000586 <CalibrateElevatorPosition>:
 586:	0e 94 a0 02 	call	0x540	; 0x540 <ReadElevatorState>
 58a:	88 23       	and	r24, r24
 58c:	29 f0       	breq	.+10     	; 0x598 <CalibrateElevatorPosition+0x12>
 58e:	68 ee       	ldi	r22, 0xE8	; 232
 590:	73 e0       	ldi	r23, 0x03	; 3
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	0e 94 79 02 	call	0x4f2	; 0x4f2 <MoveElevator>
 598:	08 95       	ret

0000059a <SetDisplay>:
 59a:	80 93 81 00 	sts	0x0081, r24
 59e:	08 95       	ret

000005a0 <SetIndicatorFloorState>:
 5a0:	84 30       	cpi	r24, 0x04	; 4
 5a2:	70 f4       	brcc	.+28     	; 0x5c0 <SetIndicatorFloorState+0x20>
 5a4:	21 e0       	ldi	r18, 0x01	; 1
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	a9 01       	movw	r20, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <SetIndicatorFloorState+0x10>
 5ac:	44 0f       	add	r20, r20
 5ae:	55 1f       	adc	r21, r21
 5b0:	8a 95       	dec	r24
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <SetIndicatorFloorState+0xc>
 5b4:	ca 01       	movw	r24, r20
 5b6:	90 91 6f 00 	lds	r25, 0x006F
 5ba:	89 2b       	or	r24, r25
 5bc:	80 93 6f 00 	sts	0x006F, r24
 5c0:	08 95       	ret

000005c2 <SetIndicatorElevatorState>:
 5c2:	84 30       	cpi	r24, 0x04	; 4
 5c4:	78 f4       	brcc	.+30     	; 0x5e4 <SetIndicatorElevatorState+0x22>
 5c6:	8c 5f       	subi	r24, 0xFC	; 252
 5c8:	21 e0       	ldi	r18, 0x01	; 1
 5ca:	30 e0       	ldi	r19, 0x00	; 0
 5cc:	a9 01       	movw	r20, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <SetIndicatorElevatorState+0x12>
 5d0:	44 0f       	add	r20, r20
 5d2:	55 1f       	adc	r21, r21
 5d4:	8a 95       	dec	r24
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <SetIndicatorElevatorState+0xe>
 5d8:	ca 01       	movw	r24, r20
 5da:	90 91 6f 00 	lds	r25, 0x006F
 5de:	89 2b       	or	r24, r25
 5e0:	80 93 6f 00 	sts	0x006F, r24
 5e4:	08 95       	ret

000005e6 <ClrIndicatorFloorState>:
 5e6:	84 30       	cpi	r24, 0x04	; 4
 5e8:	78 f4       	brcc	.+30     	; 0x608 <ClrIndicatorFloorState+0x22>
 5ea:	21 e0       	ldi	r18, 0x01	; 1
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	a9 01       	movw	r20, r18
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <ClrIndicatorFloorState+0x10>
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	8a 95       	dec	r24
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <ClrIndicatorFloorState+0xc>
 5fa:	ca 01       	movw	r24, r20
 5fc:	80 95       	com	r24
 5fe:	90 91 6f 00 	lds	r25, 0x006F
 602:	89 23       	and	r24, r25
 604:	80 93 6f 00 	sts	0x006F, r24
 608:	08 95       	ret

0000060a <ClrIndicatorElevatorState>:
 60a:	84 30       	cpi	r24, 0x04	; 4
 60c:	78 f4       	brcc	.+30     	; 0x62c <ClrIndicatorElevatorState+0x22>
 60e:	24 e0       	ldi	r18, 0x04	; 4
 610:	28 0f       	add	r18, r24
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	02 c0       	rjmp	.+4      	; 0x61c <ClrIndicatorElevatorState+0x12>
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	2a 95       	dec	r18
 61e:	e2 f7       	brpl	.-8      	; 0x618 <ClrIndicatorElevatorState+0xe>
 620:	80 95       	com	r24
 622:	90 91 6f 00 	lds	r25, 0x006F
 626:	89 23       	and	r24, r25
 628:	80 93 6f 00 	sts	0x006F, r24
 62c:	08 95       	ret

0000062e <__umulhisi3>:
 62e:	a2 9f       	mul	r26, r18
 630:	b0 01       	movw	r22, r0
 632:	b3 9f       	mul	r27, r19
 634:	c0 01       	movw	r24, r0
 636:	a3 9f       	mul	r26, r19
 638:	70 0d       	add	r23, r0
 63a:	81 1d       	adc	r24, r1
 63c:	11 24       	eor	r1, r1
 63e:	91 1d       	adc	r25, r1
 640:	b2 9f       	mul	r27, r18
 642:	70 0d       	add	r23, r0
 644:	81 1d       	adc	r24, r1
 646:	11 24       	eor	r1, r1
 648:	91 1d       	adc	r25, r1
 64a:	08 95       	ret

0000064c <_exit>:
 64c:	f8 94       	cli

0000064e <__stop_program>:
 64e:	ff cf       	rjmp	.-2      	; 0x64e <__stop_program>
