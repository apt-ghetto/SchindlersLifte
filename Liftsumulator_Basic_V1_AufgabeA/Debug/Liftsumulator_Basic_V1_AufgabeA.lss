
Liftsumulator_Basic_V1_AufgabeA.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000598  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000598  0000062c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001c  00800068  00800068  00000634  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b59  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000320  00000000  00000000  000012f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e7  00000000  00000000  00001619  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000017c  00000000  00000000  00001e00  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000794  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003e4  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00002af4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 83 00 	call	0x106	; 0x106 <main>
  8a:	0c 94 ca 02 	jmp	0x594	; 0x594 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ConvertButtonTypeToLiftPosType>:
// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
  LiftPosType retVal = None;

  switch (button)
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	c9 f0       	breq	.+50     	; 0xc8 <ConvertButtonTypeToLiftPosType+0x36>
  96:	38 f4       	brcc	.+14     	; 0xa6 <ConvertButtonTypeToLiftPosType+0x14>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	91 f0       	breq	.+36     	; 0xc0 <ConvertButtonTypeToLiftPosType+0x2e>
  9c:	84 30       	cpi	r24, 0x04	; 4
  9e:	91 f0       	breq	.+36     	; 0xc4 <ConvertButtonTypeToLiftPosType+0x32>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	a1 f4       	brne	.+40     	; 0xcc <ConvertButtonTypeToLiftPosType+0x3a>
  a4:	0b c0       	rjmp	.+22     	; 0xbc <ConvertButtonTypeToLiftPosType+0x2a>
  a6:	80 32       	cpi	r24, 0x20	; 32
  a8:	59 f0       	breq	.+22     	; 0xc0 <ConvertButtonTypeToLiftPosType+0x2e>
  aa:	18 f4       	brcc	.+6      	; 0xb2 <ConvertButtonTypeToLiftPosType+0x20>
  ac:	80 31       	cpi	r24, 0x10	; 16
  ae:	31 f0       	breq	.+12     	; 0xbc <ConvertButtonTypeToLiftPosType+0x2a>
  b0:	0d c0       	rjmp	.+26     	; 0xcc <ConvertButtonTypeToLiftPosType+0x3a>
  b2:	80 34       	cpi	r24, 0x40	; 64
  b4:	39 f0       	breq	.+14     	; 0xc4 <ConvertButtonTypeToLiftPosType+0x32>
  b6:	80 38       	cpi	r24, 0x80	; 128
  b8:	39 f0       	breq	.+14     	; 0xc8 <ConvertButtonTypeToLiftPosType+0x36>
  ba:	08 c0       	rjmp	.+16     	; 0xcc <ConvertButtonTypeToLiftPosType+0x3a>
  {
    case LiftButton_F0:
    case FloorButton_F0:
    {
      retVal = Floor0;
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	08 95       	ret
      break;
    }
    case LiftButton_F1:
    case FloorButton_F1:
    {
      retVal = Floor1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
      break;
  c2:	08 95       	ret
    }
    case LiftButton_F2:
    case FloorButton_F2:
    {
      retVal = Floor2;
  c4:	82 e0       	ldi	r24, 0x02	; 2
      break;
  c6:	08 95       	ret
    }
    case LiftButton_F3:
    case FloorButton_F3:
    {
      retVal = Floor3;
  c8:	83 e0       	ldi	r24, 0x03	; 3
      break;
  ca:	08 95       	ret
***  PRIVATE FUNCTIONs *********************************************************
*******************************************************************************/
// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
  LiftPosType retVal = None;
  cc:	87 e0       	ldi	r24, 0x07	; 7
      break;
    }
  }

  return retVal;
}
  ce:	08 95       	ret

000000d0 <CheckKeyEvent>:

// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
  d0:	cf 93       	push	r28
  ButtonType retVal = EmergencyButton;

  for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
  d2:	c0 e8       	ldi	r28, 0x80	; 128
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <CheckKeyEvent+0x8>
  d6:	c8 2f       	mov	r28, r24
  {
    if (ReadKeyEvent(key) == Pressed)
  d8:	8c 2f       	mov	r24, r28
  da:	0e 94 40 02 	call	0x480	; 0x480 <ReadKeyEvent>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	31 f4       	brne	.+12     	; 0xee <CheckKeyEvent+0x1e>
// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
  ButtonType retVal = EmergencyButton;

  for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
  e2:	8c 2f       	mov	r24, r28
  e4:	86 95       	lsr	r24
  e6:	29 f0       	breq	.+10     	; 0xf2 <CheckKeyEvent+0x22>
  e8:	cc 23       	and	r28, r28
  ea:	a9 f3       	breq	.-22     	; 0xd6 <CheckKeyEvent+0x6>
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <CheckKeyEvent+0x22>
  ee:	c6 95       	lsr	r28
  f0:	99 f7       	brne	.-26     	; 0xd8 <CheckKeyEvent+0x8>
    {
      retVal = key;
    }
  }
  return retVal;
}
  f2:	8c 2f       	mov	r24, r28
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <UpdateDisplay>:

// Update the 7-Seg. display
void UpdateDisplay (LiftPosType elevatorState)
{
  switch (elevatorState)
  f8:	85 30       	cpi	r24, 0x05	; 5
  fa:	10 f0       	brcs	.+4      	; 0x100 <UpdateDisplay+0x8>
  fc:	86 30       	cpi	r24, 0x06	; 6
  fe:	11 f4       	brne	.+4      	; 0x104 <UpdateDisplay+0xc>
    case Floor2:
    case Floor3:
    case Error:
    case Test:
    {
      SetDisplay(elevatorState);
 100:	0e 94 b8 02 	call	0x570	; 0x570 <SetDisplay>
 104:	08 95       	ret

00000106 <main>:
/*******************************************************************************
*** MAIN PROGRAM
*******************************************************************************/
int main(void)
{
  InitializePorts();  // Initialization of ports
 106:	0e 94 13 01 	call	0x226	; 0x226 <InitializePorts>
  InitializeStart();  // Set start state of the system
 10a:	0e 94 19 01 	call	0x232	; 0x232 <InitializeStart>
		{
			MoveElevator(elevatorDirection, Fast);
		}
		else
		{
			state = OpenDoor;
 10e:	d4 e0       	ldi	r29, 0x04	; 4

      case OpenDoor:
      {
        // Open the door and wait still the door is open completely
		SetDoorState(Open, currentElevatorState);
		state = Waiting;
 110:	c1 e0       	ldi	r28, 0x01	; 1
		{
			SetDoorState(Closed, currentElevatorState);
		}
		else
		{
			state = MoveLift;
 112:	13 e0       	ldi	r17, 0x03	; 3

  // Endless loop
  while(1)
  {
	// do always
	UpdateDisplay(currentElevatorState);  // Update the 7-Seg. display (lift)
 114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 118:	0e 94 7c 00 	call	0xf8	; 0xf8 <UpdateDisplay>
	currentElevatorState = ReadElevatorState();
 11c:	0e 94 8b 02 	call	0x516	; 0x516 <ReadElevatorState>
 120:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	SetOutput();               // Send the calculated output values to the ports
 124:	0e 94 31 01 	call	0x262	; 0x262 <SetOutput>

    // Handling state machine
    switch (state)
 128:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <state>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	a9 f1       	breq	.+106    	; 0x19a <main+0x94>
 130:	28 f4       	brcc	.+10     	; 0x13c <main+0x36>
 132:	88 23       	and	r24, r24
 134:	49 f0       	breq	.+18     	; 0x148 <main+0x42>
 136:	81 30       	cpi	r24, 0x01	; 1
 138:	a9 f0       	breq	.+42     	; 0x164 <main+0x5e>
 13a:	ec cf       	rjmp	.-40     	; 0x114 <main+0xe>
 13c:	83 30       	cpi	r24, 0x03	; 3
 13e:	e1 f1       	breq	.+120    	; 0x1b8 <main+0xb2>
 140:	84 30       	cpi	r24, 0x04	; 4
 142:	09 f4       	brne	.+2      	; 0x146 <main+0x40>
 144:	49 c0       	rjmp	.+146    	; 0x1d8 <main+0xd2>
 146:	e6 cf       	rjmp	.-52     	; 0x114 <main+0xe>
    {
      case Uninitialized:
      {
        // Lift position calibration to ground floor (Floor0)
		if (ReadElevatorState() != Floor0)
 148:	0e 94 8b 02 	call	0x516	; 0x516 <ReadElevatorState>
 14c:	88 23       	and	r24, r24
 14e:	19 f0       	breq	.+6      	; 0x156 <main+0x50>
		{
			CalibrateElevatorPosition();
 150:	0e 94 ae 02 	call	0x55c	; 0x55c <CalibrateElevatorPosition>
 154:	df cf       	rjmp	.-66     	; 0x114 <main+0xe>
		}
		else
		{
			state = OpenDoor;
 156:	d0 93 69 00 	sts	0x0069, r29	; 0x800069 <state>
			currentElevatorState = ReadElevatorState();
 15a:	0e 94 8b 02 	call	0x516	; 0x516 <ReadElevatorState>
 15e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 162:	d8 cf       	rjmp	.-80     	; 0x114 <main+0xe>


      case Waiting:
      {
		ButtonType key;
		key = CheckKeyEvent();
 164:	0e 94 68 00 	call	0xd0	; 0xd0 <CheckKeyEvent>
        // Waiting for new floor request
		if (EmergencyButton != key)
 168:	88 23       	and	r24, r24
 16a:	a1 f2       	breq	.-88     	; 0x114 <main+0xe>
		{
			// button was pressed
			requestedElevatorPosition = ConvertButtonTypeToLiftPosType(key);
 16c:	0e 94 49 00 	call	0x92	; 0x92 <ConvertButtonTypeToLiftPosType>
 170:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <requestedElevatorPosition>
			int result = currentElevatorState - requestedElevatorPosition;
 174:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 178:	30 e0       	ldi	r19, 0x00	; 0
 17a:	a9 01       	movw	r20, r18
 17c:	48 1b       	sub	r20, r24
 17e:	51 09       	sbc	r21, r1
 180:	ca 01       	movw	r24, r20
			if (result != 0)
 182:	00 97       	sbiw	r24, 0x00	; 0
 184:	39 f2       	breq	.-114    	; 0x114 <main+0xe>
			{
				elevatorDirection = result < 0 ? Up : Down;
 186:	89 2f       	mov	r24, r25
 188:	88 1f       	adc	r24, r24
 18a:	88 27       	eor	r24, r24
 18c:	88 1f       	adc	r24, r24
 18e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__data_end>
				state = CloseDoor;
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <state>
 198:	bd cf       	rjmp	.-134    	; 0x114 <main+0xe>


      case CloseDoor:
      {
        // Close the door and wait until the door is closed
		if (ReadDoorState(currentElevatorState) != Closed)
 19a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 19e:	0e 94 46 02 	call	0x48c	; 0x48c <ReadDoorState>
 1a2:	88 23       	and	r24, r24
 1a4:	31 f0       	breq	.+12     	; 0x1b2 <main+0xac>
		{
			SetDoorState(Closed, currentElevatorState);
 1a6:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SetDoorState>
 1b0:	b1 cf       	rjmp	.-158    	; 0x114 <main+0xe>
		}
		else
		{
			state = MoveLift;
 1b2:	10 93 69 00 	sts	0x0069, r17	; 0x800069 <state>
 1b6:	ae cf       	rjmp	.-164    	; 0x114 <main+0xe>
      case MoveLift:
      {
        // Move cabin to the requested floor
		//currentElevatorState = ReadElevatorState();

		if (currentElevatorState != requestedElevatorPosition)
 1b8:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 1bc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <requestedElevatorPosition>
 1c0:	98 17       	cp	r25, r24
 1c2:	39 f0       	breq	.+14     	; 0x1d2 <main+0xcc>
		{
			MoveElevator(elevatorDirection, Fast);
 1c4:	68 ee       	ldi	r22, 0xE8	; 232
 1c6:	73 e0       	ldi	r23, 0x03	; 3
 1c8:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 1cc:	0e 94 64 02 	call	0x4c8	; 0x4c8 <MoveElevator>
 1d0:	a1 cf       	rjmp	.-190    	; 0x114 <main+0xe>
		}
		else
		{
			state = OpenDoor;
 1d2:	d0 93 69 00 	sts	0x0069, r29	; 0x800069 <state>
 1d6:	9e cf       	rjmp	.-196    	; 0x114 <main+0xe>


      case OpenDoor:
      {
        // Open the door and wait still the door is open completely
		SetDoorState(Open, currentElevatorState);
 1d8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__data_start>
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <SetDoorState>
		state = Waiting;
 1e2:	c0 93 69 00 	sts	0x0069, r28	; 0x800069 <state>
        break;
 1e6:	96 cf       	rjmp	.-212    	; 0x114 <main+0xe>

000001e8 <MakeDoorStates>:
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	e6 e7       	ldi	r30, 0x76	; 118
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	2e e7       	ldi	r18, 0x7E	; 126
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	df 01       	movw	r26, r30
 1f6:	11 97       	sbiw	r26, 0x01	; 1
 1f8:	8c 91       	ld	r24, X
 1fa:	81 11       	cpse	r24, r1
 1fc:	06 c0       	rjmp	.+12     	; 0x20a <MakeDoorStates+0x22>
 1fe:	80 81       	ld	r24, Z
 200:	18 16       	cp	r1, r24
 202:	54 f4       	brge	.+20     	; 0x218 <MakeDoorStates+0x30>
 204:	81 50       	subi	r24, 0x01	; 1
 206:	80 83       	st	Z, r24
 208:	07 c0       	rjmp	.+14     	; 0x218 <MakeDoorStates+0x30>
 20a:	82 30       	cpi	r24, 0x02	; 2
 20c:	29 f4       	brne	.+10     	; 0x218 <MakeDoorStates+0x30>
 20e:	80 81       	ld	r24, Z
 210:	84 30       	cpi	r24, 0x04	; 4
 212:	14 f4       	brge	.+4      	; 0x218 <MakeDoorStates+0x30>
 214:	8f 5f       	subi	r24, 0xFF	; 255
 216:	80 83       	st	Z, r24
 218:	32 96       	adiw	r30, 0x02	; 2
 21a:	e2 17       	cp	r30, r18
 21c:	f3 07       	cpc	r31, r19
 21e:	51 f7       	brne	.-44     	; 0x1f4 <MakeDoorStates+0xc>
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <InitializePorts>:
 226:	8f ef       	ldi	r24, 0xFF	; 255
 228:	87 bb       	out	0x17, r24	; 23
 22a:	84 bb       	out	0x14, r24	; 20
 22c:	8a bb       	out	0x1a, r24	; 26
 22e:	11 ba       	out	0x11, r1	; 17
 230:	08 95       	ret

00000232 <InitializeStart>:
 232:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <liftPosDisplay_On>
 236:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <buttonLiftLed_on>
 23a:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <liftDisplay7Seg_On>
 23e:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <buttonFloorLed_On>
 242:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <doorframe>
 246:	e5 e7       	ldi	r30, 0x75	; 117
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	11 82       	std	Z+1, r1	; 0x01
 24c:	10 82       	st	Z, r1
 24e:	13 82       	std	Z+3, r1	; 0x03
 250:	12 82       	std	Z+2, r1	; 0x02
 252:	15 82       	std	Z+5, r1	; 0x05
 254:	14 82       	std	Z+4, r1	; 0x04
 256:	17 82       	std	Z+7, r1	; 0x07
 258:	16 82       	std	Z+6, r1	; 0x06
 25a:	8f e1       	ldi	r24, 0x1F	; 31
 25c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <liftPosition>
 260:	08 95       	ret

00000262 <SetOutput>:
 262:	40 91 6c 00 	lds	r20, 0x006C	; 0x80006c <doorOpeningRate>
 266:	50 91 6d 00 	lds	r21, 0x006D	; 0x80006d <doorOpeningRate+0x1>
 26a:	9a 01       	movw	r18, r20
 26c:	36 95       	lsr	r19
 26e:	27 95       	ror	r18
 270:	36 95       	lsr	r19
 272:	27 95       	ror	r18
 274:	36 95       	lsr	r19
 276:	27 95       	ror	r18
 278:	a7 e3       	ldi	r26, 0x37	; 55
 27a:	ba e1       	ldi	r27, 0x1A	; 26
 27c:	0e 94 bb 02 	call	0x576	; 0x576 <__umulhisi3>
 280:	00 24       	eor	r0, r0
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	00 1c       	adc	r0, r0
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	00 1c       	adc	r0, r0
 28e:	89 2f       	mov	r24, r25
 290:	90 2d       	mov	r25, r0
 292:	68 e8       	ldi	r22, 0x88	; 136
 294:	73 e1       	ldi	r23, 0x13	; 19
 296:	86 9f       	mul	r24, r22
 298:	90 01       	movw	r18, r0
 29a:	87 9f       	mul	r24, r23
 29c:	30 0d       	add	r19, r0
 29e:	96 9f       	mul	r25, r22
 2a0:	30 0d       	add	r19, r0
 2a2:	11 24       	eor	r1, r1
 2a4:	42 17       	cp	r20, r18
 2a6:	53 07       	cpc	r21, r19
 2a8:	31 f4       	brne	.+12     	; 0x2b6 <SetOutput+0x54>
 2aa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <MakeDoorStates>
 2ae:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <doorOpeningRate+0x1>
 2b2:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <doorOpeningRate>
 2b6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <repetitionRate>
 2ba:	89 30       	cpi	r24, 0x09	; 9
 2bc:	09 f1       	breq	.+66     	; 0x300 <SetOutput+0x9e>
 2be:	28 f4       	brcc	.+10     	; 0x2ca <SetOutput+0x68>
 2c0:	83 30       	cpi	r24, 0x03	; 3
 2c2:	41 f0       	breq	.+16     	; 0x2d4 <SetOutput+0x72>
 2c4:	86 30       	cpi	r24, 0x06	; 6
 2c6:	89 f0       	breq	.+34     	; 0x2ea <SetOutput+0x88>
 2c8:	43 c0       	rjmp	.+134    	; 0x350 <SetOutput+0xee>
 2ca:	8c 30       	cpi	r24, 0x0C	; 12
 2cc:	21 f1       	breq	.+72     	; 0x316 <SetOutput+0xb4>
 2ce:	8d 30       	cpi	r24, 0x0D	; 13
 2d0:	69 f1       	breq	.+90     	; 0x32c <SetOutput+0xca>
 2d2:	3e c0       	rjmp	.+124    	; 0x350 <SetOutput+0xee>
 2d4:	e0 91 76 00 	lds	r30, 0x0076	; 0x800076 <liftDoorState+0x1>
 2d8:	0e 2e       	mov	r0, r30
 2da:	00 0c       	add	r0, r0
 2dc:	ff 0b       	sbc	r31, r31
 2de:	ee 59       	subi	r30, 0x9E	; 158
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	80 81       	ld	r24, Z
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	85 bb       	out	0x15, r24	; 21
 2e8:	33 c0       	rjmp	.+102    	; 0x350 <SetOutput+0xee>
 2ea:	e0 91 78 00 	lds	r30, 0x0078	; 0x800078 <liftDoorState+0x3>
 2ee:	0e 2e       	mov	r0, r30
 2f0:	00 0c       	add	r0, r0
 2f2:	ff 0b       	sbc	r31, r31
 2f4:	ee 59       	subi	r30, 0x9E	; 158
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	80 81       	ld	r24, Z
 2fa:	82 60       	ori	r24, 0x02	; 2
 2fc:	85 bb       	out	0x15, r24	; 21
 2fe:	28 c0       	rjmp	.+80     	; 0x350 <SetOutput+0xee>
 300:	e0 91 7a 00 	lds	r30, 0x007A	; 0x80007a <liftDoorState+0x5>
 304:	0e 2e       	mov	r0, r30
 306:	00 0c       	add	r0, r0
 308:	ff 0b       	sbc	r31, r31
 30a:	ee 59       	subi	r30, 0x9E	; 158
 30c:	ff 4f       	sbci	r31, 0xFF	; 255
 30e:	80 81       	ld	r24, Z
 310:	84 60       	ori	r24, 0x04	; 4
 312:	85 bb       	out	0x15, r24	; 21
 314:	1d c0       	rjmp	.+58     	; 0x350 <SetOutput+0xee>
 316:	e0 91 7c 00 	lds	r30, 0x007C	; 0x80007c <liftDoorState+0x7>
 31a:	0e 2e       	mov	r0, r30
 31c:	00 0c       	add	r0, r0
 31e:	ff 0b       	sbc	r31, r31
 320:	ee 59       	subi	r30, 0x9E	; 158
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 81       	ld	r24, Z
 326:	88 60       	ori	r24, 0x08	; 8
 328:	85 bb       	out	0x15, r24	; 21
 32a:	12 c0       	rjmp	.+36     	; 0x350 <SetOutput+0xee>
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <repetitionRate>
 332:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <doorOpeningRate>
 336:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <doorOpeningRate+0x1>
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <doorOpeningRate+0x1>
 340:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <doorOpeningRate>
 344:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <displayCache>
 348:	91 11       	cpse	r25, r1
 34a:	31 c0       	rjmp	.+98     	; 0x3ae <SetOutput+0x14c>
 34c:	21 e0       	ldi	r18, 0x01	; 1
 34e:	56 c0       	rjmp	.+172    	; 0x3fc <SetOutput+0x19a>
 350:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <repetitionRate>
 354:	8f 5f       	subi	r24, 0xFF	; 255
 356:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <repetitionRate>
 35a:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <doorOpeningRate>
 35e:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <doorOpeningRate+0x1>
 362:	2f 5f       	subi	r18, 0xFF	; 255
 364:	3f 4f       	sbci	r19, 0xFF	; 255
 366:	30 93 6d 00 	sts	0x006D, r19	; 0x80006d <doorOpeningRate+0x1>
 36a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <doorOpeningRate>
 36e:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <displayCache>
 372:	99 23       	and	r25, r25
 374:	09 f4       	brne	.+2      	; 0x378 <SetOutput+0x116>
 376:	47 c0       	rjmp	.+142    	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 378:	2d ec       	ldi	r18, 0xCD	; 205
 37a:	82 9f       	mul	r24, r18
 37c:	21 2d       	mov	r18, r1
 37e:	11 24       	eor	r1, r1
 380:	26 95       	lsr	r18
 382:	26 95       	lsr	r18
 384:	32 2f       	mov	r19, r18
 386:	33 0f       	add	r19, r19
 388:	33 0f       	add	r19, r19
 38a:	23 0f       	add	r18, r19
 38c:	82 1b       	sub	r24, r18
 38e:	81 30       	cpi	r24, 0x01	; 1
 390:	71 f0       	breq	.+28     	; 0x3ae <SetOutput+0x14c>
 392:	28 f0       	brcs	.+10     	; 0x39e <SetOutput+0x13c>
 394:	82 30       	cpi	r24, 0x02	; 2
 396:	b1 f0       	breq	.+44     	; 0x3c4 <SetOutput+0x162>
 398:	83 30       	cpi	r24, 0x03	; 3
 39a:	f9 f0       	breq	.+62     	; 0x3da <SetOutput+0x178>
 39c:	28 c0       	rjmp	.+80     	; 0x3ee <SetOutput+0x18c>
 39e:	94 fd       	sbrc	r25, 4
 3a0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <buttonLiftLed>
 3a4:	90 ff       	sbrs	r25, 0
 3a6:	23 c0       	rjmp	.+70     	; 0x3ee <SetOutput+0x18c>
 3a8:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <buttonFloorLed>
 3ac:	20 c0       	rjmp	.+64     	; 0x3ee <SetOutput+0x18c>
 3ae:	95 ff       	sbrs	r25, 5
 3b0:	03 c0       	rjmp	.+6      	; 0x3b8 <SetOutput+0x156>
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <buttonLiftLed>
 3b8:	91 ff       	sbrs	r25, 1
 3ba:	19 c0       	rjmp	.+50     	; 0x3ee <SetOutput+0x18c>
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <buttonFloorLed>
 3c2:	15 c0       	rjmp	.+42     	; 0x3ee <SetOutput+0x18c>
 3c4:	96 ff       	sbrs	r25, 6
 3c6:	03 c0       	rjmp	.+6      	; 0x3ce <SetOutput+0x16c>
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <buttonLiftLed>
 3ce:	92 ff       	sbrs	r25, 2
 3d0:	0e c0       	rjmp	.+28     	; 0x3ee <SetOutput+0x18c>
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <buttonFloorLed>
 3d8:	0a c0       	rjmp	.+20     	; 0x3ee <SetOutput+0x18c>
 3da:	99 23       	and	r25, r25
 3dc:	1c f4       	brge	.+6      	; 0x3e4 <SetOutput+0x182>
 3de:	83 e0       	ldi	r24, 0x03	; 3
 3e0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <buttonLiftLed>
 3e4:	93 ff       	sbrs	r25, 3
 3e6:	03 c0       	rjmp	.+6      	; 0x3ee <SetOutput+0x18c>
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <buttonFloorLed>
 3ee:	89 2f       	mov	r24, r25
 3f0:	80 7f       	andi	r24, 0xF0	; 240
 3f2:	19 f0       	breq	.+6      	; 0x3fa <SetOutput+0x198>
 3f4:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <buttonLiftLed_on>
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <SetOutput+0x19a>
 3fa:	21 e0       	ldi	r18, 0x01	; 1
 3fc:	9f 70       	andi	r25, 0x0F	; 15
 3fe:	31 f0       	breq	.+12     	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 400:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <buttonFloorLed_On>
 404:	04 c0       	rjmp	.+8      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 406:	21 e0       	ldi	r18, 0x01	; 1
 408:	91 e0       	ldi	r25, 0x01	; 1
 40a:	01 c0       	rjmp	.+2      	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <liftPosDisplay_On>
 412:	81 11       	cpse	r24, r1
 414:	04 c0       	rjmp	.+8      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 416:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <liftPosition>
 41a:	8f 73       	andi	r24, 0x3F	; 63
 41c:	01 c0       	rjmp	.+2      	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
 41e:	8f e3       	ldi	r24, 0x3F	; 63
 420:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <liftPositionPort>
 424:	30 91 83 00 	lds	r19, 0x0083	; 0x800083 <liftDisplay7Seg_On>
 428:	31 11       	cpse	r19, r1
 42a:	03 c0       	rjmp	.+6      	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
 42c:	30 91 81 00 	lds	r19, 0x0081	; 0x800081 <liftDisplay7Seg>
 430:	01 c0       	rjmp	.+2      	; 0x434 <__FUSE_REGION_LENGTH__+0x34>
 432:	37 e0       	ldi	r19, 0x07	; 7
 434:	30 93 7d 00 	sts	0x007D, r19	; 0x80007d <floorDisplayPort>
 438:	30 e8       	ldi	r19, 0x80	; 128
 43a:	23 9f       	mul	r18, r19
 43c:	a0 01       	movw	r20, r0
 43e:	11 24       	eor	r1, r1
 440:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <doorframe>
 444:	60 e4       	ldi	r22, 0x40	; 64
 446:	36 9f       	mul	r19, r22
 448:	90 01       	movw	r18, r0
 44a:	11 24       	eor	r1, r1
 44c:	24 2b       	or	r18, r20
 44e:	82 2b       	or	r24, r18
 450:	88 bb       	out	0x18, r24	; 24
 452:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <buttonLiftLed>
 456:	82 2f       	mov	r24, r18
 458:	88 0f       	add	r24, r24
 45a:	88 0f       	add	r24, r24
 45c:	88 0f       	add	r24, r24
 45e:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <buttonFloorLed>
 462:	40 e2       	ldi	r20, 0x20	; 32
 464:	34 9f       	mul	r19, r20
 466:	90 01       	movw	r18, r0
 468:	11 24       	eor	r1, r1
 46a:	28 2b       	or	r18, r24
 46c:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <floorDisplayPort>
 470:	28 2b       	or	r18, r24
 472:	60 e8       	ldi	r22, 0x80	; 128
 474:	96 9f       	mul	r25, r22
 476:	c0 01       	movw	r24, r0
 478:	11 24       	eor	r1, r1
 47a:	82 2b       	or	r24, r18
 47c:	8b bb       	out	0x1b, r24	; 27
 47e:	08 95       	ret

00000480 <ReadKeyEvent>:
 480:	90 b3       	in	r25, 0x10	; 16
 482:	98 23       	and	r25, r24
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	09 f4       	brne	.+2      	; 0x48a <ReadKeyEvent+0xa>
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	08 95       	ret

0000048c <ReadDoorState>:
 48c:	e8 2f       	mov	r30, r24
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	ee 0f       	add	r30, r30
 492:	ff 1f       	adc	r31, r31
 494:	eb 58       	subi	r30, 0x8B	; 139
 496:	ff 4f       	sbci	r31, 0xFF	; 255
 498:	e1 81       	ldd	r30, Z+1	; 0x01
 49a:	0e 2e       	mov	r0, r30
 49c:	00 0c       	add	r0, r0
 49e:	ff 0b       	sbc	r31, r31
 4a0:	ee 59       	subi	r30, 0x9E	; 158
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	90 81       	ld	r25, Z
 4a6:	90 3f       	cpi	r25, 0xF0	; 240
 4a8:	29 f0       	breq	.+10     	; 0x4b4 <ReadDoorState+0x28>
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	91 11       	cpse	r25, r1
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <ReadDoorState+0x2a>
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	08 95       	ret
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	08 95       	ret

000004b8 <SetDoorState>:
 4b8:	e6 2f       	mov	r30, r22
 4ba:	f0 e0       	ldi	r31, 0x00	; 0
 4bc:	ee 0f       	add	r30, r30
 4be:	ff 1f       	adc	r31, r31
 4c0:	eb 58       	subi	r30, 0x8B	; 139
 4c2:	ff 4f       	sbci	r31, 0xFF	; 255
 4c4:	80 83       	st	Z, r24
 4c6:	08 95       	ret

000004c8 <MoveElevator>:
 4c8:	61 15       	cp	r22, r1
 4ca:	71 05       	cpc	r23, r1
 4cc:	19 f1       	breq	.+70     	; 0x514 <MoveElevator+0x4c>
 4ce:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <liftSpeed>
 4d2:	30 91 6b 00 	lds	r19, 0x006B	; 0x80006b <liftSpeed+0x1>
 4d6:	62 17       	cp	r22, r18
 4d8:	73 07       	cpc	r23, r19
 4da:	38 f0       	brcs	.+14     	; 0x4ea <MoveElevator+0x22>
 4dc:	2f 5f       	subi	r18, 0xFF	; 255
 4de:	3f 4f       	sbci	r19, 0xFF	; 255
 4e0:	30 93 6b 00 	sts	0x006B, r19	; 0x80006b <liftSpeed+0x1>
 4e4:	20 93 6a 00 	sts	0x006A, r18	; 0x80006a <liftSpeed>
 4e8:	08 95       	ret
 4ea:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <liftSpeed+0x1>
 4ee:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <liftSpeed>
 4f2:	81 30       	cpi	r24, 0x01	; 1
 4f4:	41 f4       	brne	.+16     	; 0x506 <MoveElevator+0x3e>
 4f6:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <liftPosition>
 4fa:	81 33       	cpi	r24, 0x31	; 49
 4fc:	58 f4       	brcc	.+22     	; 0x514 <MoveElevator+0x4c>
 4fe:	8f 5f       	subi	r24, 0xFF	; 255
 500:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <liftPosition>
 504:	08 95       	ret
 506:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <liftPosition>
 50a:	88 23       	and	r24, r24
 50c:	19 f0       	breq	.+6      	; 0x514 <MoveElevator+0x4c>
 50e:	81 50       	subi	r24, 0x01	; 1
 510:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <liftPosition>
 514:	08 95       	ret

00000516 <ReadElevatorState>:
 516:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <liftPosition>
 51a:	90 31       	cpi	r25, 0x10	; 16
 51c:	49 f0       	breq	.+18     	; 0x530 <ReadElevatorState+0x1a>
 51e:	18 f4       	brcc	.+6      	; 0x526 <ReadElevatorState+0x10>
 520:	99 23       	and	r25, r25
 522:	a1 f0       	breq	.+40     	; 0x54c <ReadElevatorState+0x36>
 524:	0b c0       	rjmp	.+22     	; 0x53c <ReadElevatorState+0x26>
 526:	90 32       	cpi	r25, 0x20	; 32
 528:	29 f0       	breq	.+10     	; 0x534 <ReadElevatorState+0x1e>
 52a:	90 33       	cpi	r25, 0x30	; 48
 52c:	29 f0       	breq	.+10     	; 0x538 <ReadElevatorState+0x22>
 52e:	06 c0       	rjmp	.+12     	; 0x53c <ReadElevatorState+0x26>
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	11 c0       	rjmp	.+34     	; 0x556 <ReadElevatorState+0x40>
 534:	82 e0       	ldi	r24, 0x02	; 2
 536:	0f c0       	rjmp	.+30     	; 0x556 <ReadElevatorState+0x40>
 538:	83 e0       	ldi	r24, 0x03	; 3
 53a:	0d c0       	rjmp	.+26     	; 0x556 <ReadElevatorState+0x40>
 53c:	91 33       	cpi	r25, 0x31	; 49
 53e:	40 f4       	brcc	.+16     	; 0x550 <ReadElevatorState+0x3a>
 540:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <liftPositionCache>
 544:	98 13       	cpse	r25, r24
 546:	06 c0       	rjmp	.+12     	; 0x554 <ReadElevatorState+0x3e>
 548:	85 e6       	ldi	r24, 0x65	; 101
 54a:	05 c0       	rjmp	.+10     	; 0x556 <ReadElevatorState+0x40>
 54c:	80 e0       	ldi	r24, 0x00	; 0
 54e:	03 c0       	rjmp	.+6      	; 0x556 <ReadElevatorState+0x40>
 550:	88 ec       	ldi	r24, 0xC8	; 200
 552:	01 c0       	rjmp	.+2      	; 0x556 <ReadElevatorState+0x40>
 554:	84 e6       	ldi	r24, 0x64	; 100
 556:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <liftPositionCache>
 55a:	08 95       	ret

0000055c <CalibrateElevatorPosition>:
 55c:	0e 94 8b 02 	call	0x516	; 0x516 <ReadElevatorState>
 560:	88 23       	and	r24, r24
 562:	29 f0       	breq	.+10     	; 0x56e <CalibrateElevatorPosition+0x12>
 564:	68 ee       	ldi	r22, 0xE8	; 232
 566:	73 e0       	ldi	r23, 0x03	; 3
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <MoveElevator>
 56e:	08 95       	ret

00000570 <SetDisplay>:
 570:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <liftDisplay7Seg>
 574:	08 95       	ret

00000576 <__umulhisi3>:
 576:	a2 9f       	mul	r26, r18
 578:	b0 01       	movw	r22, r0
 57a:	b3 9f       	mul	r27, r19
 57c:	c0 01       	movw	r24, r0
 57e:	a3 9f       	mul	r26, r19
 580:	70 0d       	add	r23, r0
 582:	81 1d       	adc	r24, r1
 584:	11 24       	eor	r1, r1
 586:	91 1d       	adc	r25, r1
 588:	b2 9f       	mul	r27, r18
 58a:	70 0d       	add	r23, r0
 58c:	81 1d       	adc	r24, r1
 58e:	11 24       	eor	r1, r1
 590:	91 1d       	adc	r25, r1
 592:	08 95       	ret

00000594 <_exit>:
 594:	f8 94       	cli

00000596 <__stop_program>:
 596:	ff cf       	rjmp	.-2      	; 0x596 <__stop_program>
