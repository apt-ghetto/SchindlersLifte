
Liftsumulator_Basic_V1_AufgabeB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000734  000007c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000020  0080006c  0080006c  000007d4  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cc0  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003a3  00000000  00000000  00001610  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000948  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  000022fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007f4  00000000  00000000  00002498  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004b1  00000000  00000000  00002c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000313d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e3       	ldi	r30, 0x34	; 52
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <main>
  8a:	0c 94 98 03 	jmp	0x730	; 0x730 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <AddRequestToBuffer>:

// Add a Request to the circular buffer
uint8_t AddRequestToBuffer(LiftPosType pressedFloor)
{	
    // return fail if buffer is full
    if (readPointer == writePointer && invert == TRUE) {
  92:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__data_start>
  96:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__data_start+0x1>
  9a:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <readPointer>
  9e:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <readPointer+0x1>
  a2:	2e 17       	cp	r18, r30
  a4:	3f 07       	cpc	r19, r31
  a6:	a9 f5       	brne	.+106    	; 0x112 <AddRequestToBuffer+0x80>
  a8:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <__data_end>
  ac:	91 30       	cpi	r25, 0x01	; 1
  ae:	89 f5       	brne	.+98     	; 0x112 <AddRequestToBuffer+0x80>
  b0:	35 c0       	rjmp	.+106    	; 0x11c <AddRequestToBuffer+0x8a>
			return BUFFER_SUCCESS;
		}
	}

	// save request to buffer
	*writePointer = pressedFloor;
  b2:	80 83       	st	Z, r24

	// move write pointer to next position
	writePointer++;
  b4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  b8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
  bc:	01 96       	adiw	r24, 0x01	; 1

	// check if write pointer is at the end of the buffer
	// if so, set to the beginning again
	if ( writePointer < &callBuffer[BUFFER_SIZE - 1] ) {
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	86 37       	cpi	r24, 0x76	; 118
  c2:	92 07       	cpc	r25, r18
  c4:	30 f0       	brcs	.+12     	; 0xd2 <AddRequestToBuffer+0x40>

	// save request to buffer
	*writePointer = pressedFloor;

	// move write pointer to next position
	writePointer++;
  c6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  ca:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
	if ( writePointer < &callBuffer[BUFFER_SIZE - 1] ) {
		writePointer = callBuffer;
		invert = TRUE;
	}

	return BUFFER_SUCCESS;
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	25 c0       	rjmp	.+74     	; 0x11c <AddRequestToBuffer+0x8a>
	writePointer++;

	// check if write pointer is at the end of the buffer
	// if so, set to the beginning again
	if ( writePointer < &callBuffer[BUFFER_SIZE - 1] ) {
		writePointer = callBuffer;
  d2:	84 e7       	ldi	r24, 0x74	; 116
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
  da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		invert = TRUE;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
	}

	return BUFFER_SUCCESS;
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	1a c0       	rjmp	.+52     	; 0x11c <AddRequestToBuffer+0x8a>
	for (int i = 0; i < BUFFER_SIZE; i++)
	{
		// check if the floor is already selected
		if (callBuffer[i] == pressedFloor)
		{
			return BUFFER_SUCCESS;
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	18 c0       	rjmp	.+48     	; 0x11c <AddRequestToBuffer+0x8a>
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	16 c0       	rjmp	.+44     	; 0x11c <AddRequestToBuffer+0x8a>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	14 c0       	rjmp	.+40     	; 0x11c <AddRequestToBuffer+0x8a>

	// return success if requested floor is the current destination
	// don't save request again but toggle indicator in main function
	if (pressedFloor == requestedElevatorPosition)
	{
		return BUFFER_SUCCESS;
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	12 c0       	rjmp	.+36     	; 0x11c <AddRequestToBuffer+0x8a>

	// check if the requested floor is already in the buffer
	for (int i = 0; i < BUFFER_SIZE; i++)
	{
		// check if the floor is already selected
		if (callBuffer[i] == pressedFloor)
  f8:	90 91 74 00 	lds	r25, 0x0074	; 0x800074 <callBuffer>
  fc:	89 17       	cp	r24, r25
  fe:	a1 f3       	breq	.-24     	; 0xe8 <AddRequestToBuffer+0x56>
 100:	90 91 75 00 	lds	r25, 0x0075	; 0x800075 <callBuffer+0x1>
 104:	98 17       	cp	r25, r24
 106:	91 f3       	breq	.-28     	; 0xec <AddRequestToBuffer+0x5a>
 108:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <callBuffer+0x2>
 10c:	89 13       	cpse	r24, r25
 10e:	d1 cf       	rjmp	.-94     	; 0xb2 <AddRequestToBuffer+0x20>
 110:	ef cf       	rjmp	.-34     	; 0xf0 <AddRequestToBuffer+0x5e>
        return BUFFER_FAIL;
    }

	// return success if requested floor is the current destination
	// don't save request again but toggle indicator in main function
	if (pressedFloor == requestedElevatorPosition)
 112:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <requestedElevatorPosition>
 116:	89 13       	cpse	r24, r25
 118:	ef cf       	rjmp	.-34     	; 0xf8 <AddRequestToBuffer+0x66>
 11a:	ec cf       	rjmp	.-40     	; 0xf4 <AddRequestToBuffer+0x62>
		writePointer = callBuffer;
		invert = TRUE;
	}

	return BUFFER_SUCCESS;
}
 11c:	89 2f       	mov	r24, r25
 11e:	08 95       	ret

00000120 <GetRequestFromBuffer>:

// Get a Button from the circular buffer 
uint8_t GetRequestFromBuffer()
{
	// return fail if no calls are in buffer
    if (readPointer == writePointer && invert == FALSE) {
 120:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <readPointer>
 124:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <readPointer+0x1>
 128:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 12c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 130:	e8 17       	cp	r30, r24
 132:	f9 07       	cpc	r31, r25
 134:	21 f4       	brne	.+8      	; 0x13e <GetRequestFromBuffer+0x1e>
 136:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
 13a:	88 23       	and	r24, r24
 13c:	c9 f0       	breq	.+50     	; 0x170 <GetRequestFromBuffer+0x50>
        return BUFFER_FAIL;
    }
    
	// read floor from buffer
    requestedElevatorPosition = *readPointer;
 13e:	80 81       	ld	r24, Z
 140:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <requestedElevatorPosition>
	
	// increment read position
    readPointer++;

	// reset read position to 0 if end of buffer is reached
    if (readPointer > &callBuffer[BUFFER_SIZE - 1]) {
 144:	86 e7       	ldi	r24, 0x76	; 118
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	08 97       	sbiw	r24, 0x08	; 8
 14a:	40 f0       	brcs	.+16     	; 0x15c <GetRequestFromBuffer+0x3c>

    // reset the element
    readPointer = None;
	
	// increment read position
    readPointer++;
 14c:	88 e0       	ldi	r24, 0x08	; 8
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <readPointer+0x1>
 154:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <readPointer>
    if (readPointer > &callBuffer[BUFFER_SIZE - 1]) {
        readPointer = callBuffer;
		invert = FALSE;
    }
    
    return BUFFER_SUCCESS;
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret
	// increment read position
    readPointer++;

	// reset read position to 0 if end of buffer is reached
    if (readPointer > &callBuffer[BUFFER_SIZE - 1]) {
        readPointer = callBuffer;
 15c:	84 e7       	ldi	r24, 0x74	; 116
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <readPointer+0x1>
 164:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <readPointer>
		invert = FALSE;
 168:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
    }
    
    return BUFFER_SUCCESS;
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	08 95       	ret
// Get a Button from the circular buffer 
uint8_t GetRequestFromBuffer()
{
	// return fail if no calls are in buffer
    if (readPointer == writePointer && invert == FALSE) {
        return BUFFER_FAIL;
 170:	81 e0       	ldi	r24, 0x01	; 1
        readPointer = callBuffer;
		invert = FALSE;
    }
    
    return BUFFER_SUCCESS;
}
 172:	08 95       	ret

00000174 <ConvertButtonTypeToLiftPosType>:
// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
	LiftPosType retVal = None;

	switch (button)
 174:	88 30       	cpi	r24, 0x08	; 8
 176:	c9 f0       	breq	.+50     	; 0x1aa <ConvertButtonTypeToLiftPosType+0x36>
 178:	38 f4       	brcc	.+14     	; 0x188 <ConvertButtonTypeToLiftPosType+0x14>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	91 f0       	breq	.+36     	; 0x1a2 <ConvertButtonTypeToLiftPosType+0x2e>
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	91 f0       	breq	.+36     	; 0x1a6 <ConvertButtonTypeToLiftPosType+0x32>
 182:	81 30       	cpi	r24, 0x01	; 1
 184:	a1 f4       	brne	.+40     	; 0x1ae <ConvertButtonTypeToLiftPosType+0x3a>
 186:	0b c0       	rjmp	.+22     	; 0x19e <ConvertButtonTypeToLiftPosType+0x2a>
 188:	80 32       	cpi	r24, 0x20	; 32
 18a:	59 f0       	breq	.+22     	; 0x1a2 <ConvertButtonTypeToLiftPosType+0x2e>
 18c:	18 f4       	brcc	.+6      	; 0x194 <ConvertButtonTypeToLiftPosType+0x20>
 18e:	80 31       	cpi	r24, 0x10	; 16
 190:	31 f0       	breq	.+12     	; 0x19e <ConvertButtonTypeToLiftPosType+0x2a>
 192:	0d c0       	rjmp	.+26     	; 0x1ae <ConvertButtonTypeToLiftPosType+0x3a>
 194:	80 34       	cpi	r24, 0x40	; 64
 196:	39 f0       	breq	.+14     	; 0x1a6 <ConvertButtonTypeToLiftPosType+0x32>
 198:	80 38       	cpi	r24, 0x80	; 128
 19a:	39 f0       	breq	.+14     	; 0x1aa <ConvertButtonTypeToLiftPosType+0x36>
 19c:	08 c0       	rjmp	.+16     	; 0x1ae <ConvertButtonTypeToLiftPosType+0x3a>
	{
		case LiftButton_F0:
		case FloorButton_F0:
		{
			retVal = Floor0;
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	08 95       	ret
			break;
		}
		case LiftButton_F1:
		case FloorButton_F1:
		{
			retVal = Floor1;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
			break;
 1a4:	08 95       	ret
		}
		case LiftButton_F2:
		case FloorButton_F2:
		{
			retVal = Floor2;
 1a6:	82 e0       	ldi	r24, 0x02	; 2
			break;
 1a8:	08 95       	ret
		}
		case LiftButton_F3:
		case FloorButton_F3:
		{
			retVal = Floor3;
 1aa:	83 e0       	ldi	r24, 0x03	; 3
			break;
 1ac:	08 95       	ret
}

// Convert ButtonType to LiftPosType
LiftPosType ConvertButtonTypeToLiftPosType (ButtonType button)
{
	LiftPosType retVal = None;
 1ae:	87 e0       	ldi	r24, 0x07	; 7
			break;
		}
	}

	return retVal;
}
 1b0:	08 95       	ret

000001b2 <CheckKeyEvent>:

// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
 1b2:	cf 93       	push	r28
	ButtonType retVal = EmergencyButton;

	for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
 1b4:	c0 e8       	ldi	r28, 0x80	; 128
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <CheckKeyEvent+0x8>
 1b8:	c8 2f       	mov	r28, r24
	{
		if (ReadKeyEvent(key) == Pressed)
 1ba:	8c 2f       	mov	r24, r28
 1bc:	0e 94 c7 02 	call	0x58e	; 0x58e <ReadKeyEvent>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	31 f4       	brne	.+12     	; 0x1d0 <CheckKeyEvent+0x1e>
// Check if buttons are pressed
ButtonType CheckKeyEvent ()
{
	ButtonType retVal = EmergencyButton;

	for (ButtonType key = FloorButton_F3; ((key >= LiftButton_F0) && (retVal == EmergencyButton)); key>>=1)
 1c4:	8c 2f       	mov	r24, r28
 1c6:	86 95       	lsr	r24
 1c8:	29 f0       	breq	.+10     	; 0x1d4 <CheckKeyEvent+0x22>
 1ca:	cc 23       	and	r28, r28
 1cc:	a9 f3       	breq	.-22     	; 0x1b8 <CheckKeyEvent+0x6>
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <CheckKeyEvent+0x22>
 1d0:	c6 95       	lsr	r28
 1d2:	99 f7       	brne	.-26     	; 0x1ba <CheckKeyEvent+0x8>
		{
			retVal = key;
		}
	}
	return retVal;
}
 1d4:	8c 2f       	mov	r24, r28
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <UpdateDisplay>:

// Update the 7-Seg. display
void UpdateDisplay (LiftPosType elevatorState)
{
	switch (elevatorState)
 1da:	85 30       	cpi	r24, 0x05	; 5
 1dc:	10 f0       	brcs	.+4      	; 0x1e2 <UpdateDisplay+0x8>
 1de:	86 30       	cpi	r24, 0x06	; 6
 1e0:	11 f4       	brne	.+4      	; 0x1e6 <UpdateDisplay+0xc>
		case Floor2:
		case Floor3:
		case Error:
		case Test:
		{
			SetDisplay(elevatorState);
 1e2:	0e 94 3f 03 	call	0x67e	; 0x67e <SetDisplay>
 1e6:	08 95       	ret

000001e8 <main>:
/*******************************************************************************
*** MAIN PROGRAM
*******************************************************************************/
int main(void)
{
	InitializePorts();  // Initialization of ports
 1e8:	0e 94 9a 01 	call	0x334	; 0x334 <InitializePorts>
	InitializeStart();  // Set start state of the system
 1ec:	0e 94 a0 01 	call	0x340	; 0x340 <InitializeStart>
				{
					SetDoorState(Closed, currentElevatorState);
				}
				else
				{
					state = MoveLift;
 1f0:	03 e0       	ldi	r16, 0x03	; 3
				{
					MoveElevator(elevatorDirection, Fast);
				}
				else
				{
					state = OpenDoor;
 1f2:	14 e0       	ldi	r17, 0x04	; 4
			{
				// Open the door and wait still the door is open completely
				SetDoorState(Open, currentElevatorState);
				if (ReadDoorState(currentElevatorState) == Open)
				{
					state = Waiting;
 1f4:	ff 24       	eor	r15, r15
 1f6:	f3 94       	inc	r15

	// Endless loop
	while(1)
	{
		// do always
		UpdateDisplay(currentElevatorState);  // Update the 7-Seg. display (lift)
 1f8:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentElevatorState>
 1fc:	0e 94 ed 00 	call	0x1da	; 0x1da <UpdateDisplay>
		currentElevatorState = ReadElevatorState();
 200:	0e 94 12 03 	call	0x624	; 0x624 <ReadElevatorState>
 204:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentElevatorState>
		SetOutput();               // Send the calculated output values to the ports
 208:	0e 94 b8 01 	call	0x370	; 0x370 <SetOutput>
        
		// check if button is pressed		
        ButtonType newKey = CheckKeyEvent();
 20c:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <CheckKeyEvent>
 210:	d8 2f       	mov	r29, r24
		LiftPosType pressedFloor = ConvertButtonTypeToLiftPosType(newKey);
 212:	0e 94 ba 00 	call	0x174	; 0x174 <ConvertButtonTypeToLiftPosType>
 216:	c8 2f       	mov	r28, r24
        
		// if a button is pressed, check if it is a floor-request
		// and if it's not the current floor
        if (pressedFloor <= 3 && pressedFloor != currentElevatorState)
 218:	84 30       	cpi	r24, 0x04	; 4
 21a:	90 f4       	brcc	.+36     	; 0x240 <main+0x58>
 21c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentElevatorState>
 220:	c8 17       	cp	r28, r24
 222:	71 f0       	breq	.+28     	; 0x240 <main+0x58>
		{
			if (!AddRequestToBuffer(pressedFloor))
 224:	8c 2f       	mov	r24, r28
 226:	0e 94 49 00 	call	0x92	; 0x92 <AddRequestToBuffer>
 22a:	81 11       	cpse	r24, r1
 22c:	09 c0       	rjmp	.+18     	; 0x240 <main+0x58>
			{
				// if call is saved to buffer, set indicators
				newKey < 16 ? SetIndicatorElevatorState(pressedFloor)
				: SetIndicatorFloorState(pressedFloor);
 22e:	d0 31       	cpi	r29, 0x10	; 16
 230:	20 f4       	brcc	.+8      	; 0x23a <main+0x52>
        if (pressedFloor <= 3 && pressedFloor != currentElevatorState)
		{
			if (!AddRequestToBuffer(pressedFloor))
			{
				// if call is saved to buffer, set indicators
				newKey < 16 ? SetIndicatorElevatorState(pressedFloor)
 232:	8c 2f       	mov	r24, r28
 234:	0e 94 53 03 	call	0x6a6	; 0x6a6 <SetIndicatorElevatorState>
 238:	03 c0       	rjmp	.+6      	; 0x240 <main+0x58>
				: SetIndicatorFloorState(pressedFloor);
 23a:	8c 2f       	mov	r24, r28
 23c:	0e 94 42 03 	call	0x684	; 0x684 <SetIndicatorFloorState>
			}
        }

		// Handling state machine
		switch (state)
 240:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <state>
 244:	82 30       	cpi	r24, 0x02	; 2
 246:	09 f1       	breq	.+66     	; 0x28a <main+0xa2>
 248:	28 f4       	brcc	.+10     	; 0x254 <main+0x6c>
 24a:	88 23       	and	r24, r24
 24c:	41 f0       	breq	.+16     	; 0x25e <main+0x76>
 24e:	81 30       	cpi	r24, 0x01	; 1
 250:	a1 f0       	breq	.+40     	; 0x27a <main+0x92>
 252:	d2 cf       	rjmp	.-92     	; 0x1f8 <main+0x10>
 254:	83 30       	cpi	r24, 0x03	; 3
 256:	41 f1       	breq	.+80     	; 0x2a8 <main+0xc0>
 258:	84 30       	cpi	r24, 0x04	; 4
 25a:	b1 f1       	breq	.+108    	; 0x2c8 <main+0xe0>
 25c:	cd cf       	rjmp	.-102    	; 0x1f8 <main+0x10>
		{
			case Uninitialized:
			{
				// Lift position calibration to ground floor (Floor0)
				if (ReadElevatorState() != Floor0)
 25e:	0e 94 12 03 	call	0x624	; 0x624 <ReadElevatorState>
 262:	88 23       	and	r24, r24
 264:	19 f0       	breq	.+6      	; 0x26c <main+0x84>
				{
					CalibrateElevatorPosition();
 266:	0e 94 35 03 	call	0x66a	; 0x66a <CalibrateElevatorPosition>
 26a:	c6 cf       	rjmp	.-116    	; 0x1f8 <main+0x10>
				}
				else
				{
					state = OpenDoor;
 26c:	10 93 6e 00 	sts	0x006E, r17	; 0x80006e <state>
					currentElevatorState = ReadElevatorState();
 270:	0e 94 12 03 	call	0x624	; 0x624 <ReadElevatorState>
 274:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <currentElevatorState>
 278:	bf cf       	rjmp	.-130    	; 0x1f8 <main+0x10>


			case Waiting:
			{
				// check for saved calls in buffer
				if (!GetRequestFromBuffer())
 27a:	0e 94 90 00 	call	0x120	; 0x120 <GetRequestFromBuffer>
 27e:	81 11       	cpse	r24, r1
 280:	bb cf       	rjmp	.-138    	; 0x1f8 <main+0x10>
				{
					// request was found
					state = CloseDoor;					
 282:	82 e0       	ldi	r24, 0x02	; 2
 284:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <state>
 288:	b7 cf       	rjmp	.-146    	; 0x1f8 <main+0x10>


			case CloseDoor:
			{
				// Close the door and wait until the door is closed
				if (ReadDoorState(currentElevatorState) != Closed)
 28a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentElevatorState>
 28e:	0e 94 cd 02 	call	0x59a	; 0x59a <ReadDoorState>
 292:	88 23       	and	r24, r24
 294:	31 f0       	breq	.+12     	; 0x2a2 <main+0xba>
				{
					SetDoorState(Closed, currentElevatorState);
 296:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <currentElevatorState>
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <SetDoorState>
 2a0:	ab cf       	rjmp	.-170    	; 0x1f8 <main+0x10>
				}
				else
				{
					state = MoveLift;
 2a2:	00 93 6e 00 	sts	0x006E, r16	; 0x80006e <state>
 2a6:	a8 cf       	rjmp	.-176    	; 0x1f8 <main+0x10>


			case MoveLift:
			{
				// Move cabin to the requested floor
				if (currentElevatorState != requestedElevatorPosition)
 2a8:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <currentElevatorState>
 2ac:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <requestedElevatorPosition>
 2b0:	98 17       	cp	r25, r24
 2b2:	39 f0       	breq	.+14     	; 0x2c2 <main+0xda>
				{
					MoveElevator(elevatorDirection, Fast);
 2b4:	68 ee       	ldi	r22, 0xE8	; 232
 2b6:	73 e0       	ldi	r23, 0x03	; 3
 2b8:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <elevatorDirection>
 2bc:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <MoveElevator>
 2c0:	9b cf       	rjmp	.-202    	; 0x1f8 <main+0x10>
				}
				else
				{
					state = OpenDoor;
 2c2:	10 93 6e 00 	sts	0x006E, r17	; 0x80006e <state>
 2c6:	98 cf       	rjmp	.-208    	; 0x1f8 <main+0x10>


			case OpenDoor:
			{
				// Open the door and wait still the door is open completely
				SetDoorState(Open, currentElevatorState);
 2c8:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <currentElevatorState>
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <SetDoorState>
				if (ReadDoorState(currentElevatorState) == Open)
 2d2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentElevatorState>
 2d6:	0e 94 cd 02 	call	0x59a	; 0x59a <ReadDoorState>
 2da:	82 30       	cpi	r24, 0x02	; 2
 2dc:	09 f0       	breq	.+2      	; 0x2e0 <main+0xf8>
 2de:	8c cf       	rjmp	.-232    	; 0x1f8 <main+0x10>
				{
					state = Waiting;
 2e0:	f0 92 6e 00 	sts	0x006E, r15	; 0x80006e <state>
					ClrIndicatorFloorState(currentElevatorState);
 2e4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentElevatorState>
 2e8:	0e 94 65 03 	call	0x6ca	; 0x6ca <ClrIndicatorFloorState>
					ClrIndicatorElevatorState(currentElevatorState);
 2ec:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <currentElevatorState>
 2f0:	0e 94 77 03 	call	0x6ee	; 0x6ee <ClrIndicatorElevatorState>
 2f4:	81 cf       	rjmp	.-254    	; 0x1f8 <main+0x10>

000002f6 <MakeDoorStates>:
 2f6:	cf 93       	push	r28
 2f8:	df 93       	push	r29
 2fa:	ee e7       	ldi	r30, 0x7E	; 126
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	26 e8       	ldi	r18, 0x86	; 134
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	df 01       	movw	r26, r30
 304:	11 97       	sbiw	r26, 0x01	; 1
 306:	8c 91       	ld	r24, X
 308:	81 11       	cpse	r24, r1
 30a:	06 c0       	rjmp	.+12     	; 0x318 <MakeDoorStates+0x22>
 30c:	80 81       	ld	r24, Z
 30e:	18 16       	cp	r1, r24
 310:	54 f4       	brge	.+20     	; 0x326 <MakeDoorStates+0x30>
 312:	81 50       	subi	r24, 0x01	; 1
 314:	80 83       	st	Z, r24
 316:	07 c0       	rjmp	.+14     	; 0x326 <MakeDoorStates+0x30>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	29 f4       	brne	.+10     	; 0x326 <MakeDoorStates+0x30>
 31c:	80 81       	ld	r24, Z
 31e:	84 30       	cpi	r24, 0x04	; 4
 320:	14 f4       	brge	.+4      	; 0x326 <MakeDoorStates+0x30>
 322:	8f 5f       	subi	r24, 0xFF	; 255
 324:	80 83       	st	Z, r24
 326:	32 96       	adiw	r30, 0x02	; 2
 328:	e2 17       	cp	r30, r18
 32a:	f3 07       	cpc	r31, r19
 32c:	51 f7       	brne	.-44     	; 0x302 <MakeDoorStates+0xc>
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	08 95       	ret

00000334 <InitializePorts>:
 334:	8f ef       	ldi	r24, 0xFF	; 255
 336:	87 bb       	out	0x17, r24	; 23
 338:	84 bb       	out	0x14, r24	; 20
 33a:	8a bb       	out	0x1a, r24	; 26
 33c:	11 ba       	out	0x11, r1	; 17
 33e:	08 95       	ret

00000340 <InitializeStart>:
 340:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <liftPosDisplay_On>
 344:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <buttonLiftLed_on>
 348:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <liftDisplay7Seg_On>
 34c:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <buttonFloorLed_On>
 350:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <doorframe>
 354:	ed e7       	ldi	r30, 0x7D	; 125
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	11 82       	std	Z+1, r1	; 0x01
 35a:	10 82       	st	Z, r1
 35c:	13 82       	std	Z+3, r1	; 0x03
 35e:	12 82       	std	Z+2, r1	; 0x02
 360:	15 82       	std	Z+5, r1	; 0x05
 362:	14 82       	std	Z+4, r1	; 0x04
 364:	17 82       	std	Z+7, r1	; 0x07
 366:	16 82       	std	Z+6, r1	; 0x06
 368:	8f e1       	ldi	r24, 0x1F	; 31
 36a:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <liftPosition>
 36e:	08 95       	ret

00000370 <SetOutput>:
 370:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <doorOpeningRate>
 374:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <doorOpeningRate+0x1>
 378:	9a 01       	movw	r18, r20
 37a:	36 95       	lsr	r19
 37c:	27 95       	ror	r18
 37e:	36 95       	lsr	r19
 380:	27 95       	ror	r18
 382:	36 95       	lsr	r19
 384:	27 95       	ror	r18
 386:	a7 e3       	ldi	r26, 0x37	; 55
 388:	ba e1       	ldi	r27, 0x1A	; 26
 38a:	0e 94 89 03 	call	0x712	; 0x712 <__umulhisi3>
 38e:	00 24       	eor	r0, r0
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	00 1c       	adc	r0, r0
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	00 1c       	adc	r0, r0
 39c:	89 2f       	mov	r24, r25
 39e:	90 2d       	mov	r25, r0
 3a0:	68 e8       	ldi	r22, 0x88	; 136
 3a2:	73 e1       	ldi	r23, 0x13	; 19
 3a4:	86 9f       	mul	r24, r22
 3a6:	90 01       	movw	r18, r0
 3a8:	87 9f       	mul	r24, r23
 3aa:	30 0d       	add	r19, r0
 3ac:	96 9f       	mul	r25, r22
 3ae:	30 0d       	add	r19, r0
 3b0:	11 24       	eor	r1, r1
 3b2:	42 17       	cp	r20, r18
 3b4:	53 07       	cpc	r21, r19
 3b6:	31 f4       	brne	.+12     	; 0x3c4 <SetOutput+0x54>
 3b8:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <MakeDoorStates>
 3bc:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <doorOpeningRate+0x1>
 3c0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <doorOpeningRate>
 3c4:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <repetitionRate>
 3c8:	89 30       	cpi	r24, 0x09	; 9
 3ca:	09 f1       	breq	.+66     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 3cc:	28 f4       	brcc	.+10     	; 0x3d8 <SetOutput+0x68>
 3ce:	83 30       	cpi	r24, 0x03	; 3
 3d0:	41 f0       	breq	.+16     	; 0x3e2 <SetOutput+0x72>
 3d2:	86 30       	cpi	r24, 0x06	; 6
 3d4:	89 f0       	breq	.+34     	; 0x3f8 <SetOutput+0x88>
 3d6:	43 c0       	rjmp	.+134    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 3d8:	8c 30       	cpi	r24, 0x0C	; 12
 3da:	21 f1       	breq	.+72     	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 3dc:	8d 30       	cpi	r24, 0x0D	; 13
 3de:	69 f1       	breq	.+90     	; 0x43a <__FUSE_REGION_LENGTH__+0x3a>
 3e0:	3e c0       	rjmp	.+124    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 3e2:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <liftDoorState+0x1>
 3e6:	0e 2e       	mov	r0, r30
 3e8:	00 0c       	add	r0, r0
 3ea:	ff 0b       	sbc	r31, r31
 3ec:	ea 59       	subi	r30, 0x9A	; 154
 3ee:	ff 4f       	sbci	r31, 0xFF	; 255
 3f0:	80 81       	ld	r24, Z
 3f2:	81 60       	ori	r24, 0x01	; 1
 3f4:	85 bb       	out	0x15, r24	; 21
 3f6:	33 c0       	rjmp	.+102    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 3f8:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <liftDoorState+0x3>
 3fc:	0e 2e       	mov	r0, r30
 3fe:	00 0c       	add	r0, r0
 400:	ff 0b       	sbc	r31, r31
 402:	ea 59       	subi	r30, 0x9A	; 154
 404:	ff 4f       	sbci	r31, 0xFF	; 255
 406:	80 81       	ld	r24, Z
 408:	82 60       	ori	r24, 0x02	; 2
 40a:	85 bb       	out	0x15, r24	; 21
 40c:	28 c0       	rjmp	.+80     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 40e:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <liftDoorState+0x5>
 412:	0e 2e       	mov	r0, r30
 414:	00 0c       	add	r0, r0
 416:	ff 0b       	sbc	r31, r31
 418:	ea 59       	subi	r30, 0x9A	; 154
 41a:	ff 4f       	sbci	r31, 0xFF	; 255
 41c:	80 81       	ld	r24, Z
 41e:	84 60       	ori	r24, 0x04	; 4
 420:	85 bb       	out	0x15, r24	; 21
 422:	1d c0       	rjmp	.+58     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 424:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <liftDoorState+0x7>
 428:	0e 2e       	mov	r0, r30
 42a:	00 0c       	add	r0, r0
 42c:	ff 0b       	sbc	r31, r31
 42e:	ea 59       	subi	r30, 0x9A	; 154
 430:	ff 4f       	sbci	r31, 0xFF	; 255
 432:	80 81       	ld	r24, Z
 434:	88 60       	ori	r24, 0x08	; 8
 436:	85 bb       	out	0x15, r24	; 21
 438:	12 c0       	rjmp	.+36     	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <repetitionRate>
 440:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <doorOpeningRate>
 444:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <doorOpeningRate+0x1>
 448:	01 96       	adiw	r24, 0x01	; 1
 44a:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <doorOpeningRate+0x1>
 44e:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <doorOpeningRate>
 452:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <displayCache>
 456:	91 11       	cpse	r25, r1
 458:	31 c0       	rjmp	.+98     	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
 45a:	21 e0       	ldi	r18, 0x01	; 1
 45c:	56 c0       	rjmp	.+172    	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
 45e:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <repetitionRate>
 462:	8f 5f       	subi	r24, 0xFF	; 255
 464:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <repetitionRate>
 468:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <doorOpeningRate>
 46c:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <doorOpeningRate+0x1>
 470:	2f 5f       	subi	r18, 0xFF	; 255
 472:	3f 4f       	sbci	r19, 0xFF	; 255
 474:	30 93 72 00 	sts	0x0072, r19	; 0x800072 <doorOpeningRate+0x1>
 478:	20 93 71 00 	sts	0x0071, r18	; 0x800071 <doorOpeningRate>
 47c:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <displayCache>
 480:	99 23       	and	r25, r25
 482:	09 f4       	brne	.+2      	; 0x486 <__FUSE_REGION_LENGTH__+0x86>
 484:	47 c0       	rjmp	.+142    	; 0x514 <__FUSE_REGION_LENGTH__+0x114>
 486:	2d ec       	ldi	r18, 0xCD	; 205
 488:	82 9f       	mul	r24, r18
 48a:	21 2d       	mov	r18, r1
 48c:	11 24       	eor	r1, r1
 48e:	26 95       	lsr	r18
 490:	26 95       	lsr	r18
 492:	32 2f       	mov	r19, r18
 494:	33 0f       	add	r19, r19
 496:	33 0f       	add	r19, r19
 498:	23 0f       	add	r18, r19
 49a:	82 1b       	sub	r24, r18
 49c:	81 30       	cpi	r24, 0x01	; 1
 49e:	71 f0       	breq	.+28     	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
 4a0:	28 f0       	brcs	.+10     	; 0x4ac <__FUSE_REGION_LENGTH__+0xac>
 4a2:	82 30       	cpi	r24, 0x02	; 2
 4a4:	b1 f0       	breq	.+44     	; 0x4d2 <__FUSE_REGION_LENGTH__+0xd2>
 4a6:	83 30       	cpi	r24, 0x03	; 3
 4a8:	f9 f0       	breq	.+62     	; 0x4e8 <__FUSE_REGION_LENGTH__+0xe8>
 4aa:	28 c0       	rjmp	.+80     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4ac:	94 fd       	sbrc	r25, 4
 4ae:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <buttonLiftLed>
 4b2:	90 ff       	sbrs	r25, 0
 4b4:	23 c0       	rjmp	.+70     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4b6:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <buttonFloorLed>
 4ba:	20 c0       	rjmp	.+64     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4bc:	95 ff       	sbrs	r25, 5
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <__FUSE_REGION_LENGTH__+0xc6>
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <buttonLiftLed>
 4c6:	91 ff       	sbrs	r25, 1
 4c8:	19 c0       	rjmp	.+50     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <buttonFloorLed>
 4d0:	15 c0       	rjmp	.+42     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4d2:	96 ff       	sbrs	r25, 6
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <__FUSE_REGION_LENGTH__+0xdc>
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <buttonLiftLed>
 4dc:	92 ff       	sbrs	r25, 2
 4de:	0e c0       	rjmp	.+28     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <buttonFloorLed>
 4e6:	0a c0       	rjmp	.+20     	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4e8:	99 23       	and	r25, r25
 4ea:	1c f4       	brge	.+6      	; 0x4f2 <__FUSE_REGION_LENGTH__+0xf2>
 4ec:	83 e0       	ldi	r24, 0x03	; 3
 4ee:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <buttonLiftLed>
 4f2:	93 ff       	sbrs	r25, 3
 4f4:	03 c0       	rjmp	.+6      	; 0x4fc <__FUSE_REGION_LENGTH__+0xfc>
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <buttonFloorLed>
 4fc:	89 2f       	mov	r24, r25
 4fe:	80 7f       	andi	r24, 0xF0	; 240
 500:	19 f0       	breq	.+6      	; 0x508 <__FUSE_REGION_LENGTH__+0x108>
 502:	20 91 86 00 	lds	r18, 0x0086	; 0x800086 <buttonLiftLed_on>
 506:	01 c0       	rjmp	.+2      	; 0x50a <__FUSE_REGION_LENGTH__+0x10a>
 508:	21 e0       	ldi	r18, 0x01	; 1
 50a:	9f 70       	andi	r25, 0x0F	; 15
 50c:	31 f0       	breq	.+12     	; 0x51a <__FUSE_REGION_LENGTH__+0x11a>
 50e:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <buttonFloorLed_On>
 512:	04 c0       	rjmp	.+8      	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	01 c0       	rjmp	.+2      	; 0x51c <__FUSE_REGION_LENGTH__+0x11c>
 51a:	91 e0       	ldi	r25, 0x01	; 1
 51c:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <liftPosDisplay_On>
 520:	81 11       	cpse	r24, r1
 522:	04 c0       	rjmp	.+8      	; 0x52c <__FUSE_REGION_LENGTH__+0x12c>
 524:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <liftPosition>
 528:	8f 73       	andi	r24, 0x3F	; 63
 52a:	01 c0       	rjmp	.+2      	; 0x52e <__FUSE_REGION_LENGTH__+0x12e>
 52c:	8f e3       	ldi	r24, 0x3F	; 63
 52e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <liftPositionPort>
 532:	30 91 8b 00 	lds	r19, 0x008B	; 0x80008b <liftDisplay7Seg_On>
 536:	31 11       	cpse	r19, r1
 538:	03 c0       	rjmp	.+6      	; 0x540 <__FUSE_REGION_LENGTH__+0x140>
 53a:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <liftDisplay7Seg>
 53e:	01 c0       	rjmp	.+2      	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
 540:	37 e0       	ldi	r19, 0x07	; 7
 542:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <floorDisplayPort>
 546:	30 e8       	ldi	r19, 0x80	; 128
 548:	23 9f       	mul	r18, r19
 54a:	a0 01       	movw	r20, r0
 54c:	11 24       	eor	r1, r1
 54e:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <doorframe>
 552:	60 e4       	ldi	r22, 0x40	; 64
 554:	36 9f       	mul	r19, r22
 556:	90 01       	movw	r18, r0
 558:	11 24       	eor	r1, r1
 55a:	24 2b       	or	r18, r20
 55c:	82 2b       	or	r24, r18
 55e:	88 bb       	out	0x18, r24	; 24
 560:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <buttonLiftLed>
 564:	82 2f       	mov	r24, r18
 566:	88 0f       	add	r24, r24
 568:	88 0f       	add	r24, r24
 56a:	88 0f       	add	r24, r24
 56c:	30 91 7b 00 	lds	r19, 0x007B	; 0x80007b <buttonFloorLed>
 570:	40 e2       	ldi	r20, 0x20	; 32
 572:	34 9f       	mul	r19, r20
 574:	90 01       	movw	r18, r0
 576:	11 24       	eor	r1, r1
 578:	28 2b       	or	r18, r24
 57a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <floorDisplayPort>
 57e:	28 2b       	or	r18, r24
 580:	60 e8       	ldi	r22, 0x80	; 128
 582:	96 9f       	mul	r25, r22
 584:	c0 01       	movw	r24, r0
 586:	11 24       	eor	r1, r1
 588:	82 2b       	or	r24, r18
 58a:	8b bb       	out	0x1b, r24	; 27
 58c:	08 95       	ret

0000058e <ReadKeyEvent>:
 58e:	90 b3       	in	r25, 0x10	; 16
 590:	98 23       	and	r25, r24
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	09 f4       	brne	.+2      	; 0x598 <ReadKeyEvent+0xa>
 596:	80 e0       	ldi	r24, 0x00	; 0
 598:	08 95       	ret

0000059a <ReadDoorState>:
 59a:	e8 2f       	mov	r30, r24
 59c:	f0 e0       	ldi	r31, 0x00	; 0
 59e:	ee 0f       	add	r30, r30
 5a0:	ff 1f       	adc	r31, r31
 5a2:	e3 58       	subi	r30, 0x83	; 131
 5a4:	ff 4f       	sbci	r31, 0xFF	; 255
 5a6:	e1 81       	ldd	r30, Z+1	; 0x01
 5a8:	0e 2e       	mov	r0, r30
 5aa:	00 0c       	add	r0, r0
 5ac:	ff 0b       	sbc	r31, r31
 5ae:	ea 59       	subi	r30, 0x9A	; 154
 5b0:	ff 4f       	sbci	r31, 0xFF	; 255
 5b2:	90 81       	ld	r25, Z
 5b4:	90 3f       	cpi	r25, 0xF0	; 240
 5b6:	29 f0       	breq	.+10     	; 0x5c2 <ReadDoorState+0x28>
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	91 11       	cpse	r25, r1
 5bc:	03 c0       	rjmp	.+6      	; 0x5c4 <ReadDoorState+0x2a>
 5be:	80 e0       	ldi	r24, 0x00	; 0
 5c0:	08 95       	ret
 5c2:	82 e0       	ldi	r24, 0x02	; 2
 5c4:	08 95       	ret

000005c6 <SetDoorState>:
 5c6:	e6 2f       	mov	r30, r22
 5c8:	f0 e0       	ldi	r31, 0x00	; 0
 5ca:	ee 0f       	add	r30, r30
 5cc:	ff 1f       	adc	r31, r31
 5ce:	e3 58       	subi	r30, 0x83	; 131
 5d0:	ff 4f       	sbci	r31, 0xFF	; 255
 5d2:	80 83       	st	Z, r24
 5d4:	08 95       	ret

000005d6 <MoveElevator>:
 5d6:	61 15       	cp	r22, r1
 5d8:	71 05       	cpc	r23, r1
 5da:	19 f1       	breq	.+70     	; 0x622 <MoveElevator+0x4c>
 5dc:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <liftSpeed>
 5e0:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <liftSpeed+0x1>
 5e4:	62 17       	cp	r22, r18
 5e6:	73 07       	cpc	r23, r19
 5e8:	38 f0       	brcs	.+14     	; 0x5f8 <MoveElevator+0x22>
 5ea:	2f 5f       	subi	r18, 0xFF	; 255
 5ec:	3f 4f       	sbci	r19, 0xFF	; 255
 5ee:	30 93 70 00 	sts	0x0070, r19	; 0x800070 <liftSpeed+0x1>
 5f2:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <liftSpeed>
 5f6:	08 95       	ret
 5f8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <liftSpeed+0x1>
 5fc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <liftSpeed>
 600:	81 30       	cpi	r24, 0x01	; 1
 602:	41 f4       	brne	.+16     	; 0x614 <MoveElevator+0x3e>
 604:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <liftPosition>
 608:	81 33       	cpi	r24, 0x31	; 49
 60a:	58 f4       	brcc	.+22     	; 0x622 <MoveElevator+0x4c>
 60c:	8f 5f       	subi	r24, 0xFF	; 255
 60e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <liftPosition>
 612:	08 95       	ret
 614:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <liftPosition>
 618:	88 23       	and	r24, r24
 61a:	19 f0       	breq	.+6      	; 0x622 <MoveElevator+0x4c>
 61c:	81 50       	subi	r24, 0x01	; 1
 61e:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <liftPosition>
 622:	08 95       	ret

00000624 <ReadElevatorState>:
 624:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <liftPosition>
 628:	90 31       	cpi	r25, 0x10	; 16
 62a:	49 f0       	breq	.+18     	; 0x63e <ReadElevatorState+0x1a>
 62c:	18 f4       	brcc	.+6      	; 0x634 <ReadElevatorState+0x10>
 62e:	99 23       	and	r25, r25
 630:	a1 f0       	breq	.+40     	; 0x65a <ReadElevatorState+0x36>
 632:	0b c0       	rjmp	.+22     	; 0x64a <ReadElevatorState+0x26>
 634:	90 32       	cpi	r25, 0x20	; 32
 636:	29 f0       	breq	.+10     	; 0x642 <ReadElevatorState+0x1e>
 638:	90 33       	cpi	r25, 0x30	; 48
 63a:	29 f0       	breq	.+10     	; 0x646 <ReadElevatorState+0x22>
 63c:	06 c0       	rjmp	.+12     	; 0x64a <ReadElevatorState+0x26>
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	11 c0       	rjmp	.+34     	; 0x664 <ReadElevatorState+0x40>
 642:	82 e0       	ldi	r24, 0x02	; 2
 644:	0f c0       	rjmp	.+30     	; 0x664 <ReadElevatorState+0x40>
 646:	83 e0       	ldi	r24, 0x03	; 3
 648:	0d c0       	rjmp	.+26     	; 0x664 <ReadElevatorState+0x40>
 64a:	91 33       	cpi	r25, 0x31	; 49
 64c:	40 f4       	brcc	.+16     	; 0x65e <ReadElevatorState+0x3a>
 64e:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <liftPositionCache>
 652:	98 13       	cpse	r25, r24
 654:	06 c0       	rjmp	.+12     	; 0x662 <ReadElevatorState+0x3e>
 656:	85 e6       	ldi	r24, 0x65	; 101
 658:	05 c0       	rjmp	.+10     	; 0x664 <ReadElevatorState+0x40>
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	03 c0       	rjmp	.+6      	; 0x664 <ReadElevatorState+0x40>
 65e:	88 ec       	ldi	r24, 0xC8	; 200
 660:	01 c0       	rjmp	.+2      	; 0x664 <ReadElevatorState+0x40>
 662:	84 e6       	ldi	r24, 0x64	; 100
 664:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <liftPositionCache>
 668:	08 95       	ret

0000066a <CalibrateElevatorPosition>:
 66a:	0e 94 12 03 	call	0x624	; 0x624 <ReadElevatorState>
 66e:	88 23       	and	r24, r24
 670:	29 f0       	breq	.+10     	; 0x67c <CalibrateElevatorPosition+0x12>
 672:	68 ee       	ldi	r22, 0xE8	; 232
 674:	73 e0       	ldi	r23, 0x03	; 3
 676:	80 e0       	ldi	r24, 0x00	; 0
 678:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <MoveElevator>
 67c:	08 95       	ret

0000067e <SetDisplay>:
 67e:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <liftDisplay7Seg>
 682:	08 95       	ret

00000684 <SetIndicatorFloorState>:
 684:	84 30       	cpi	r24, 0x04	; 4
 686:	70 f4       	brcc	.+28     	; 0x6a4 <SetIndicatorFloorState+0x20>
 688:	21 e0       	ldi	r18, 0x01	; 1
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	a9 01       	movw	r20, r18
 68e:	02 c0       	rjmp	.+4      	; 0x694 <SetIndicatorFloorState+0x10>
 690:	44 0f       	add	r20, r20
 692:	55 1f       	adc	r21, r21
 694:	8a 95       	dec	r24
 696:	e2 f7       	brpl	.-8      	; 0x690 <SetIndicatorFloorState+0xc>
 698:	ca 01       	movw	r24, r20
 69a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <displayCache>
 69e:	89 2b       	or	r24, r25
 6a0:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <displayCache>
 6a4:	08 95       	ret

000006a6 <SetIndicatorElevatorState>:
 6a6:	84 30       	cpi	r24, 0x04	; 4
 6a8:	78 f4       	brcc	.+30     	; 0x6c8 <SetIndicatorElevatorState+0x22>
 6aa:	8c 5f       	subi	r24, 0xFC	; 252
 6ac:	21 e0       	ldi	r18, 0x01	; 1
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	a9 01       	movw	r20, r18
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <SetIndicatorElevatorState+0x12>
 6b4:	44 0f       	add	r20, r20
 6b6:	55 1f       	adc	r21, r21
 6b8:	8a 95       	dec	r24
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <SetIndicatorElevatorState+0xe>
 6bc:	ca 01       	movw	r24, r20
 6be:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <displayCache>
 6c2:	89 2b       	or	r24, r25
 6c4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <displayCache>
 6c8:	08 95       	ret

000006ca <ClrIndicatorFloorState>:
 6ca:	84 30       	cpi	r24, 0x04	; 4
 6cc:	78 f4       	brcc	.+30     	; 0x6ec <ClrIndicatorFloorState+0x22>
 6ce:	21 e0       	ldi	r18, 0x01	; 1
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	a9 01       	movw	r20, r18
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <ClrIndicatorFloorState+0x10>
 6d6:	44 0f       	add	r20, r20
 6d8:	55 1f       	adc	r21, r21
 6da:	8a 95       	dec	r24
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <ClrIndicatorFloorState+0xc>
 6de:	ca 01       	movw	r24, r20
 6e0:	80 95       	com	r24
 6e2:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <displayCache>
 6e6:	89 23       	and	r24, r25
 6e8:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <displayCache>
 6ec:	08 95       	ret

000006ee <ClrIndicatorElevatorState>:
 6ee:	84 30       	cpi	r24, 0x04	; 4
 6f0:	78 f4       	brcc	.+30     	; 0x710 <ClrIndicatorElevatorState+0x22>
 6f2:	24 e0       	ldi	r18, 0x04	; 4
 6f4:	28 0f       	add	r18, r24
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	02 c0       	rjmp	.+4      	; 0x700 <ClrIndicatorElevatorState+0x12>
 6fc:	88 0f       	add	r24, r24
 6fe:	99 1f       	adc	r25, r25
 700:	2a 95       	dec	r18
 702:	e2 f7       	brpl	.-8      	; 0x6fc <ClrIndicatorElevatorState+0xe>
 704:	80 95       	com	r24
 706:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <displayCache>
 70a:	89 23       	and	r24, r25
 70c:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <displayCache>
 710:	08 95       	ret

00000712 <__umulhisi3>:
 712:	a2 9f       	mul	r26, r18
 714:	b0 01       	movw	r22, r0
 716:	b3 9f       	mul	r27, r19
 718:	c0 01       	movw	r24, r0
 71a:	a3 9f       	mul	r26, r19
 71c:	70 0d       	add	r23, r0
 71e:	81 1d       	adc	r24, r1
 720:	11 24       	eor	r1, r1
 722:	91 1d       	adc	r25, r1
 724:	b2 9f       	mul	r27, r18
 726:	70 0d       	add	r23, r0
 728:	81 1d       	adc	r24, r1
 72a:	11 24       	eor	r1, r1
 72c:	91 1d       	adc	r25, r1
 72e:	08 95       	ret

00000730 <_exit>:
 730:	f8 94       	cli

00000732 <__stop_program>:
 732:	ff cf       	rjmp	.-2      	; 0x732 <__stop_program>
